{
    "": 76004,
    "0x415565b0()": 656,
    "0x52bbbe29(int184, uint72[], bytes9[], int256, uint208[], bytes8[])": 145,
    "0x7c025200()": 4321,
    "0x9a2b8115()": 283,
    "0xfb0f3ee1()": 1204,
    "ClaimAfterVesting()": 1,
    "DepositInEth(address optimizer,address to,tuple tokenData)": 2,
    "JunionWasHereXD_ufpfzhujazyn()": 202,
    "MarketplacePurchaseBrightList(uint256 SaleIndex, uint256 Amount, bytes32[] Proof)": 2,
    "MerkleClaim(uint256[] TokenIDs,bytes32[][] Proof)": 1,
    "Mint(uint256 _amount)": 2,
    "MintStar(uint256 _amount, address _reserve)": 4,
    "OGmint(uint256 _mintAmount, uint256 allowance, bytes32[] proof)": 1,
    "PurchasePack(uint256 Amount,bytes32[] Proof)": 1,
    "PurchasePass(uint256 Amount,bytes32[] Proof)": 1,
    "RedeemArtistPass(uint256 ArtistID, uint256 TicketID, uint256 TimeSlot, bool Delegate)": 1,
    "RedeemGT(uint256 TicketID, uint256 TimeSlot, bool Delegate)": 1,
    "RedeemGT(uint256[] TicketIDs,string[] Data,string[] Type)": 2,
    "RedeemOption(uint256[] TokenIDs)": 1,
    "SubToJunionOnYoutubeXD_lvfsnfguwqne()": 223,
    "Swapout(uint256 amount, address bindaddr)": 4,
    "WLmint(uint256 _mintAmount, uint256 allowance, bytes32[] proof)": 1,
    "ZapIn(address _FromTokenContractAddress, address _pairAddress, uint256 _amount, uint256 _minPoolTokens, address _swapTarget, bytes swapData, address affiliate, bool transferResidual, bool shouldSellEntireBalance)": 18,
    "ZapIn(address fromToken, uint256 amountIn, address aToken, uint256 minATokens, address swapTarget, bytes swapData, address affiliate)": 1,
    "ZapIn(address fromToken, uint256 amountIn, address toVault, address superVault, bool isAaveUnderlying, uint256 minYVTokens, address intermediateToken, address swapTarget, bytes swapData, address affiliate, address partnerId)": 4,
    "ZapIn(address fromToken, uint256 amountIn, address toVault, address superVault, bool isAaveUnderlying, uint256 minYVTokens, address intermediateToken, address swapTarget, bytes swapData, address affiliate, bool shouldSellEntireBalance)": 4,
    "ZapIn(address fromTokenAddress, address toTokenAddress, address swapAddress, uint256 incomingTokenQty, uint256 minPoolTokens, address swapTarget, bytes swapData, address affiliate)": 8,
    "ZapIn(address tokenIn,uint256 amount,address optimizer,address to,tuple token0Data,tuple token1Data)": 1,
    "ZapOut(address fromVault, uint256 amountIn, address toToken, bool isAaveUnderlying, uint256 minToTokens, address swapTarget, bytes swapData, address affiliate, bool shouldSellEntireBalance)": 11,
    "ZapOut(address swapAddress, uint256 incomingCrv, address intermediateToken, address toToken, uint256 minToTokens, address _swapTarget, bytes _swapCallData, address affiliate, bool shouldSellEntireBalance)": 3,
    "ZapOut(address toTokenAddress, address fromPoolAddress, uint256 incomingLP, uint256 minTokensRec, address[] swapTargets, bytes[] swapData, address affiliate, bool shouldSellEntireBalance)": 13,
    "ZapOutWithPermit(address fromVault, uint256 amountIn, address toToken, bool isAaveUnderlying, uint256 minToTokens, bytes permitSig, address swapTarget, bytes swapData, address affiliate, bool shouldSellEntireBalance)": 1,
    "ZapStake(address fromToken, uint256 amountIn, address toToken, uint256 minToToken, address swapTarget, bytes swapData, address referral)": 2,
    "_claimLegacy(uint256[] tokenIds,bytes32 hash,bytes signature)": 1,
    "acceptDeal(tuple[] _nftPurchaseList,tuple merkleData,uint256 _purchaseTokenAmount)": 3,
    "acceptGrant(uint256 index, uint256 amount, bytes32[] merkleProof)": 2,
    "acceptGrant(uint256 index, uint256 amount, uint256 vestingLength, uint256 cliffLength, uint256 vestingInterval, bytes32[] merkleProof)": 3,
    "acceptOffer(tuple _offer,tuple _signature,tuple _borrowerSettings)": 3,
    "actionAlive(uint8 action,uint256 tokenID,uint8 amount,bytes32 messageHash,bytes signature)": 110,
    "activate(address dede)": 1,
    "activeMint(uint256 _mintCount)": 2,
    "actualMintFunction(uint8 _mintAmt)": 6,
    "addAddress(string name, address newAddress)": 3,
    "addBid()": 1,
    "addCoin(uint256 catTokenId,uint256 coinTokenId)": 106,
    "addCollateral(address token, address poolAddr, uint256 baseTokenAmount)": 3,
    "addCollateral(uint256 _collateralAmount,address _borrower)": 6,
    "addCollateralETH(address creditManager, address onBehalfOf)": 1,
    "addFunding(uint256 _amount)": 1,
    "addLiquidity(address _poolAnchor, address _reserveToken, uint256 _amount)": 15,
    "addLiquidity(address pool, uint256 amount0Max, uint256 amount1Max, uint256 amount0Min, uint256 amount1Min, address receiver)": 6,
    "addLiquidity(address pool,uint256 amount0Max,uint256 amount1Max,uint256 amount0Min,uint256 amount1Min,uint256 amountSharesMin,address receiver)": 2,
    "addLiquidity(address sender, uint256 amount)": 64,
    "addLiquidity(address stock, address money, bool isOnlySwap, uint256 amountStockDesired, uint256 amountMoneyDesired, uint256 amountStockMin, uint256 amountMoneyMin, address to, uint256 deadline)": 4,
    "addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)": 75,
    "addLiquidity(uint256 _lqtyAmount, uint256 _usdcAmount, uint256 _amountLQTYMin, uint256 _amountUSDCMin, address _to, uint256 _deadline)": 4,
    "addLiquidity(uint256 amountA)": 14,
    "addLiquidity(uint256 inputBase, uint256 inputToken, address token)": 37,
    "addLiquidity(uint256 value, address token, uint256 max_tokens)": 7,
    "addLiquidity(uint256[] amounts, uint256 minToMint, uint256 deadline)": 2,
    "addLiquidityDualTokenAndPt(address receiver,address market,tuple input,uint256 netPtDesired,uint256 minLpOut)": 16,
    "addLiquidityETH()": 4,
    "addLiquidityETH(address pool, address onBehalfOf, uint16 referralCode)": 5,
    "addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)": 210,
    "addLiquiditySingleToken(address receiver,address market,uint256 minLpOut,tuple guessPtReceivedFromSy,tuple input)": 17,
    "addLiquiditySingleTokenKeepYt(address receiver,address market,uint256 minLpOut,uint256 minYtOut,tuple input)": 5,
    "addLiquidityToV1(address pair, uint256 baseAmount, uint256 quoteAmount, uint256 baseMinShares, uint256 quoteMinShares, uint8 flag, uint256 deadLine)": 4,
    "addLock(uint208 amount, uint256 duration)": 1,
    "addLore(address tokenContract, uint256 tokenId, uint256 parentLoreId, bool nsfw, string loreMetadataURI)": 1,
    "addMarketLiquidityDual(bytes32 _marketFactoryId, address _xyt, address _token, uint256 _desiredXytAmount, uint256 _desiredTokenAmount, uint256 _xytMinAmount, uint256 _tokenMinAmount)": 1,
    "addNativeLiquidity(uint256 _amount)": 31,
    "addPod(address pod)": 13,
    "addToTower(uint16[] tokenIds)": 1,
    "addToWhitelist()": 1,
    "add_liquidity(address _pool, uint256[3] _deposit_amounts, uint256 _min_mint_amount)": 25,
    "add_liquidity(address _pool, uint256[3] _deposit_amounts, uint256 _min_mint_amount, bool _use_eth)": 10,
    "add_liquidity(address _pool, uint256[4] _deposit_amounts, uint256 _min_mint_amount)": 91,
    "add_liquidity(uint256[2] _amounts, uint256 _min_mint_amount, bool _use_underlying)": 105,
    "add_liquidity(uint256[2] amounts, uint256 min_mint_amount)": 229,
    "add_liquidity(uint256[3] _amounts, uint256 _min_mint_amount, bool _use_underlying)": 3,
    "add_liquidity(uint256[3] uamounts, uint256 min_mint_amount)": 26,
    "add_liquidity(uint256[4] amounts, uint256 min_mint_amount)": 22,
    "add_reward_amount(address gauge, address reward_token, uint256 amount)": 5,
    "adjustLock(uint256 _amount,uint256 _newUnlockTime)": 2,
    "adjustTrove(uint256 _maxFeePercentage, uint256 _collWithdrawal, uint256 _LUSDChange, bool _isDebtIncrease, address _upperHint, address _lowerHint)": 27,
    "adoptNPets(uint256[] tokenIds)": 3,
    "aggregate(tuple[] calls)": 22,
    "airdropMint(uint256 count, uint256 allowance, bytes32[] proof)": 1,
    "allFaction(uint16[7][] all)": 19,
    "allowListMint(string[] variants, bytes signature)": 1,
    "allowListMint(uint256 _wave, uint256 _numTokens, bool _payWithApeCoin, bytes32[] _merkleProof)": 1,
    "allowListMint(uint256 count, bytes32[] proof)": 1,
    "allowListMint(uint256 count, uint256 allowance, bytes32[] proof)": 1,
    "allowlistMint()": 2,
    "allowlistMint(address _contract, bytes32[] _proof, uint256 _quantity)": 1,
    "allowlistMint(bytes _signature)": 1,
    "allowlistMint(bytes32 hash,bytes signature,string nonce,string list,uint256 maxQuantity,uint256 quantity)": 1,
    "allowlistMint(bytes32[] merkleProof, uint16 amount)": 1,
    "allowlistMint(uint256 quantity, bytes32[] proof)": 2,
    "allowlistMint(uint256 saleId, uint256 amount, uint256 nonce, bytes signature)": 1,
    "anySwapOut(address token, address to, uint256 amount, uint256 chainID)": 6,
    "anySwapOutNative(address token, address to, uint256 toChainID)": 29,
    "anySwapOutNative(address token, string to, uint256 toChainID)": 1,
    "anySwapOutUnderlying(address token, address to, uint256 amount, uint256 toChainID)": 234,
    "anySwapOutUnderlying(address token, string to, uint256 amount, uint256 toChainID)": 4,
    "apeMint(uint256 _qty)": 2,
    "approve(address _spender)": 7,
    "approve(address _spender, uint256 _value)": 14454,
    "approveAndCall(address _spender, uint256 _value, bytes _extraData)": 22,
    "approveAndCallWithSender(address _spender, uint256 _value, bytes4 _selector, bytes _callParams)": 2,
    "approveAndSetDefault(bytes32 _ethSignedMessageHash, bytes _signature, uint256 flufId, uint256 _defaultBackground, uint256 _defaultMusic)": 5,
    "approveDelegation(address delegatee, uint256 amount)": 10,
    "approveMint(address _beneficiary, uint256 _tokenAmount)": 11,
    "approveSubAccount(uint256 subAccountId, address spender, uint256 amount)": 1,
    "approveUnlock(uint256 amount)": 1,
    "approveWithdraw(address token, address user, uint256 channelId)": 8,
    "asmMint(uint256[] _tokenIds)": 3,
    "assemble(uint256 devourType, uint256[] _tokenIds)": 2,
    "assign_delegate(address addr)": 1,
    "atomicMatch_(address[14] addrs, uint256[18] uints, uint8[8] feeMethodsSidesKindsHowToCalls, bytes calldataBuy, bytes calldataSell, bytes replacementPatternBuy, bytes replacementPatternSell, bytes staticExtradataBuy, bytes staticExtradataSell, uint8[2] vs, bytes32[5] rssMetadata)": 2324,
    "attemptUnlock(address owner)": 1,
    "auction(bool mintingTwo)": 3,
    "auctionETH(address nftAsset, uint256 nftTokenId, address onBehalfOf)": 13,
    "auctionMint(uint256 quantity)": 2,
    "autoCompound(tuple params)": 3,
    "autoleverage(address pool, int128 poolInputIndex, int128 poolOutputIndex, address alchemist, address yieldToken, uint256 collateralInitial, uint256 collateralTotal, uint256 targetDebt)": 5,
    "batch(bytes[] calls)": 44,
    "batch(bytes[] calls, bool revertOnFail)": 11,
    "batch(bytes[] calls, uint256[] msgValues, bool revertOnFail)": 1,
    "batchBalanceAction(address account,tuple[] actions)": 27,
    "batchBalanceAndTradeAction(address account,tuple[] actions)": 16,
    "batchBuyFromOpenSea(tuple[] openseaTrades)": 6,
    "batchBuyWithERC20s(tuple erc20Details,tuple[] tradeDetails,tuple[] converstionDetails,address[] dustTokens)": 10,
    "batchClaim(bytes32 expectedMerkleRoot,tuple[] Claims)": 4,
    "batchCommit(tuple[] commits)": 61,
    "batchDeposit(bytes pubkeys, bytes withdrawal_credentials, bytes signatures, bytes32[] deposit_data_roots)": 1,
    "batchDeposit(bytes[] pubkeys, bytes[] withdrawal_credentials, bytes[] signatures, bytes32[] deposit_data_roots)": 1,
    "batchDispatch(tuple[] items,address[] deferLiquidityChecks)": 426,
    "batchEditBoost(tuple[] boostInfos)": 1,
    "batchEditQuest(tuple[] questInfos)": 1,
    "batchExec(address[] tos, bytes32[] configs, bytes[] datas)": 1,
    "batchExec(tuple[] calls)": 6,
    "batchExecute(bytes[] data)": 21,
    "batchFillRfqOrders(tuple[] orders,tuple[] signatures,uint128[] takerTokenFillAmounts,bool revertIfIncomplete)": 4,
    "batchMint(address _to, uint256[] _ids, uint256[] _timestamps, bytes[] _signatures)": 1,
    "batchMint(address to, uint256 count)": 1,
    "batchMint(bytes _signature, uint256[] _validTokenIds, uint256[] _tokenIds, uint256[] _amounts, uint256[] _maxAmounts)": 2,
    "batchMintWhitelist(uint256 arboriaAmount, uint256 illskagaardAmount, uint256 lacreanAmount)": 1,
    "batchRedeemAvatars(uint256[] tokenIds, bytes32[][] proofs)": 1,
    "batchRedeemBonusPacks(uint256[] tokenIds, bytes32[][] proofs)": 1,
    "batchRedeemParcels(uint256[] tokenIds, bytes32[][] proofs)": 2,
    "batchRedeemTransports(uint256[] tokenIds, bytes32[][] proofs)": 2,
    "batchReveal(tuple[] reveals)": 61,
    "batchStake(uint256[] _stakingAmounts, uint256[] _predictions)": 1,
    "batchStartQuest(tuple[] questInfos)": 5,
    "batchStopQuest(uint256[] tokenIds)": 2,
    "batchSwap(uint8 kind, tuple[] swaps, address[] assets, tuple funds, int256[] limits, uint256 deadline)": 169,
    "batchTransfer(address from, address to, uint256[] tokenIds)": 1,
    "batchWrap(uint256[] _rescueOrders)": 1,
    "beginWithdrawal(bytes signature,uint256 withdrawalId,uint256 amount)": 1,
    "bid()": 7,
    "bid(address _bidder, uint256 _tokenId, uint256 _value)": 1,
    "bid(address _bidder, uint256 _value, address _token, uint256 _tokensNumber)": 7,
    "bid(address receiver)": 5,
    "bid(address referrer,uint40 listingId,bool increase,bytes data)": 1,
    "bid(uint256 _tokenID, uint256 _unitPrice, uint256 _amount, uint256 _expiry)": 3,
    "bid(uint8 amount)": 2,
    "bidOnName(string _name)": 102,
    "bidSummon(uint256 numWarriors)": 2,
    "bidWithDiscount(uint256 discountPercentage,bytes32[] proof)": 1,
    "bidderClaim(uint256 index)": 2,
    "bind()": 1,
    "bite(uint256 batId, address victimContract, uint256 victimId, string newTokenURI, bytes signature)": 7,
    "blessEggs(address user, uint256 amount)": 2,
    "boardShip(uint256[] _tokenIds)": 11,
    "bond(address bonding, uint256 amount)": 1,
    "bondWithHint(uint256 _amount, address _to, address _oldDelegateNewPosPrev, address _oldDelegateNewPosNext, address _currDelegateNewPosPrev, address _currDelegateNewPosNext)": 1,
    "borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode)": 2,
    "borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf)": 665,
    "borrow(address underlying, uint256 borrowAmount)": 7,
    "borrow(uint256 _pid, address _underlying, address _collateral, uint256 _amountBorrow, uint256 _amountCollateral)": 6,
    "borrow(uint256 borrowAmount)": 184,
    "borrowApeAndStake(tuple stakingInfo,tuple[] _nfts,tuple[] _nftPairs)": 1,
    "borrowAsset(uint256 _borrowAmount,uint256 _collateralAmount,address _receiver)": 20,
    "borrowETH(address lendingPool, uint256 amount, uint256 interesRateMode, uint16 referralCode)": 28,
    "borrowForDeposit(uint256 _pid, uint256 _token0, uint256 _borrowBlock, uint256 _supportPid)": 1,
    "breakLuckyCatCoinBank(uint256 tokenId)": 106,
    "breed(tuple matingRequest,uint16 acceptorTokenId,bytes sig)": 2,
    "breed(uint256 _first, uint256 _second)": 1,
    "bridgeAsset(uint32 destinationNetwork,address destinationAddress,uint256 amount,address token,bool forceUpdateGlobalExitRoot,bytes permitData)": 2,
    "bridgeBack(uint256 _amount,string _to)": 2,
    "broadcastUserPosition(address user,uint256[] chainIds)": 1,
    "build()": 6,
    "build(address _owner, uint256 accountVersion, address _origin)": 5,
    "bulkBuy(uint256 amount)": 3,
    "bulkExecute(tuple[] executions)": 61,
    "bulkMint(uint16 numberOfMints,address toAddress,uint256 referrerTokenId,bytes32 hash,bytes signature)": 4,
    "bulkPurchase(tuple[] purchaseDetails,address feeRecipientFirst,address feeRecipientSecond,bool allowFail)": 1,
    "bulkStake(uint16[] _token_ids)": 1,
    "bulkTransfer(tuple[] items,bytes32 conduitKey)": 132,
    "bulksendToken(address _token, address[] _to, uint256[] _values, bytes32 _uniqueId)": 6,
    "burn()": 2,
    "burn(address _owner, uint256 _amount)": 57,
    "burn(address _token, address _vault, uint256 _slippage, bytes _btcDestination, uint256 _amount)": 1,
    "burn(address _token, uint256 _amount, address _withdrawAccount, uint64 _nonce)": 8,
    "burn(address feeToken_, address wrappedToken_, uint256 amount_, bytes receiver_)": 1,
    "burn(bytes _to, uint256 _amount)": 58,
    "burn(bytes data, address account, uint256 value)": 2,
    "burn(uint16 tokenId)": 141,
    "burn(uint256 _value, address victim)": 2,
    "burn(uint256 _value, bytes _data)": 1,
    "burn(uint256 _value, uint256 _burnpwd)": 1,
    "burn(uint256 amount)": 14,
    "burn(uint256 amount, address burner, address dest, address poolManager, uint256 minCollatAmount)": 6,
    "burn(uint256 amount, bytes32 to)": 96,
    "burn(uint256 amount,tuple addr)": 1,
    "burn(uint256 objectId, uint256 amount, bytes data)": 2,
    "burn(uint256 tokensToRedeemTwei, bool redeemForKnc, uint256 minRate)": 3,
    "burn(uint8 outputAsset, uint256 amount)": 4,
    "burn2Redeem(uint256[] tokenIds)": 2,
    "burnAndCollectEther(address shotgunClause)": 3,
    "burnAndMint(uint256 oldBlockNumber, uint256 newBlockNumber)": 3,
    "burnAndMint(uint256[] ids,uint256[] values)": 1,
    "burnAndMintNewPolymorph(uint256[] tokenIds)": 1,
    "burnG0Buds(uint256 _male, uint256 _female)": 4,
    "burnPack(uint256 packId)": 1,
    "burnSake(uint8 amount)": 1,
    "burnSynths(uint256 amount)": 39,
    "burnSynthsToTarget()": 79,
    "burnSynthsToTargetOnBehalf(address burnForAddress)": 7,
    "burnToMint(uint256[] kinesisTokensToBurn)": 5,
    "burnTransfer(uint256 quantity,bool isLux)": 2,
    "burnWPowerPerpAmount(uint256 _vaultId, uint256 _wPowerPerpAmount, uint256 _withdrawAmount)": 2,
    "buy()": 1,
    "buy(address _reserveToken, uint256 _depositAmount, uint256 _minReturn)": 3,
    "buy(address _sendTo, uint256 _amount)": 1,
    "buy(address _to,uint256 _id,uint256 _amount,uint256 _timestamp,bytes _signature,bytes32[] _ogProof)": 5,
    "buy(address accessget, uint256 _token, address _to, uint256 _tokenId)": 1,
    "buy(address token,uint256 amount,uint256 minUsdcAmountOut,uint256 numberOfReleases,address onBehalfOf)": 2,
    "buy(uint24 offeringId_, uint128 units_)": 1,
    "buy(uint256 _amount)": 26,
    "buy(uint256 _amount, address _receiver, bytes32[] _proof)": 2,
    "buy(uint256 _payment, uint8 _sellOption)": 1,
    "buy(uint256 _tokenId, uint256 _nonce, uint256 _expiry, bytes _signature)": 5,
    "buy(uint256 _x, uint256 _y)": 1,
    "buy(uint256 amount, uint256 mintStart, uint256 mintEnd, uint256 mintPrice, uint256 mintMaxAmount, bytes32[] proof)": 1,
    "buy(uint256 weth2Eth,uint256 eth2Weth,tuple[] erc20Approvals,tuple[] erc20Transfers,tuple[] marketOrders,tuple[] erc721Tokens,tuple[] erc1155Tokens,address[] moreDustTokens)": 1,
    "buyAndFree22457070633(uint256 amount)": 31,
    "buyAndRedeem(uint256 vaultId, uint256 amount, uint256[] specificIds, address[] path, address to)": 5,
    "buyAndSwap721(uint256 vaultId, uint256[] idsIn, uint256[] specificIds, address[] path, address to)": 3,
    "buyAuction(uint256 _tokenId)": 1,
    "buyAuthorised(uint256 _amount, uint256 _totalPrice, uint256 _maxPerAddress, uint256 _expires, bytes _signature)": 2,
    "buyBananas(uint256 amount)": 1,
    "buyBananasHolders()": 1,
    "buyCover(tuple params,tuple[] poolAllocationRequests)": 1,
    "buyCoverWithMetadata(uint256[] coverDetails, uint16 coverPeriod, bytes4 coverCurr, address smartCAdd, uint8 _v, bytes32 _r, bytes32 _s, bool payWithNXM, string ipfsMetadata)": 24,
    "buyERC1155(tuple sellOrder,tuple signature,uint128 erc1155BuyAmount,bytes callbackData)": 3,
    "buyEdition(uint256 _editionId, bytes _signature, uint256 _ticketNumber)": 1,
    "buyEdition(uint256 editionId)": 2,
    "buyEditionToken(uint256 _editionId)": 1,
    "buyGem(address usr, uint256 gemAmt)": 1,
    "buyGod(uint256 _godId)": 7,
    "buyIDO()": 4,
    "buyL2(tuple plotData,bytes32[] proof)": 58,
    "buyNFT(bytes32[] _merkleProof)": 1,
    "buyNOM(uint256 estAmountNOM, uint256 allowSlip)": 1,
    "buyNow(uint256 _artworkId, uint8 v, bytes32 r, bytes32 s)": 1,
    "buyOnUniswapFork(address factory, bytes32 initCode, uint256 amountInMax, uint256 amountOut, address[] path)": 1,
    "buyOnUniswapV2Fork(address tokenIn, uint256 amountInMax, uint256 amountOut, address weth, uint256[] pools)": 1,
    "buyOnUniswapV2ForkWithPermit(address tokenIn, uint256 amountInMax, uint256 amountOut, address weth, uint256[] pools, bytes permit)": 1,
    "buyPrivateSale(uint256 amount, uint256 allocation, bytes32[] merkleProof)": 2,
    "buyPunk(uint256 punkIndex)": 10,
    "buyShares(uint256 stake_asset_amount, uint256 image_asset_amount)": 4,
    "buyStakingLot(uint256 amount)": 1,
    "buyTokens(uint256 from, uint256 to)": 6,
    "buyTokensByContract(string[] _names, address _contract)": 2,
    "buyTokensFromAllowList(bytes32[] _merkleProof, uint8 _amount)": 1,
    "buyVoucher(uint256 _amount, uint256 _minSharesToMint)": 44,
    "buyWhitelistFries(uint256 value, uint256 whitelistLimit, bool vestingEnabled, bytes32[] proof)": 1,
    "buyWithEth(uint256 _punks)": 2,
    "buyWithSignature(address _to, uint256 _tokenId, string _payload, uint256 _nonce, bytes _signature)": 1,
    "buyWithUSDT(uint256 amount)": 2,
    "buyerWithdraw(uint256 tokenAmount)": 1,
    "cBridgeIM(tuple request,tuple[] calls,address _receiverContract,uint64 _dstChainId,uint64 _nonce,uint32 _maxSlippage,uint256 _sgnFee,tuple imMessage)": 1,
    "cache(uint256 _pid, uint256 _amount)": 81,
    "calculateRewards(address account)": 1,
    "call(uint256 k)": 1,
    "callBridgeCall(address token,uint256 amount,string destinationChain,string bridgedTokenSymbol,tuple[] sourceCalls,tuple[] destinationCalls,address refundRecipient,bool enableForecall)": 1,
    "callOnExtension(address _extension, uint256 _actionId, bytes _callArgs)": 40,
    "cancel(bytes32[] itemHashes, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": 3,
    "cancel(tuple order)": 1,
    "cancel(uint256[] nonces)": 1,
    "cancelAllOrdersForSender(uint256 minNonce)": 1,
    "cancelBid(address _tokenAddress, uint256 _tokenId)": 3,
    "cancelBuyPrice(address nftContract, uint256 tokenId)": 1,
    "cancelLimitOrder(tuple order)": 76,
    "cancelLoanCommitmentBeforeLoanHasBegun(uint256 _nonce)": 38,
    "cancelMultipleMakerOrders(uint256[] orderNonces)": 55,
    "cancelNonces(uint256[] nonces)": 2,
    "cancelOrder(bytes32 trxnRef)": 4,
    "cancelOrder(tuple order)": 276,
    "cancelOrder_(address[7] addrs, uint256[9] uints, uint8 feeMethod, uint8 side, uint8 saleKind, uint8 howToCall, bytes calldata, bytes replacementPattern, bytes staticExtradata, uint8 v, bytes32 r, bytes32 s)": 358,
    "cancelOrders(bytes32[] _orderIds)": 1,
    "cancelOrders(tuple[] orders)": 5,
    "cancelRequest(uint256 _requestId)": 1,
    "cancelWithdraw(address _llamaPay, address _from, address _to, uint216 _amountPerSec, uint40 _starts, uint40 _frequency)": 3,
    "cancelWithdrawal(uint256 requestId)": 1,
    "cash()": 1,
    "cast(address[] _targets, bytes[] _datas, address _origin)": 2,
    "cast(string[] _targetNames, bytes[] _datas, address _origin)": 142,
    "castRefundableVote(uint256 proposalId, uint8 support)": 3,
    "castRefundableVoteWithReason(uint256 proposalId, uint8 support, string reason)": 3,
    "castVote(uint256 proposalId, bool support)": 18,
    "castVote(uint256 proposalId, uint8 support)": 15,
    "castVotes(tuple[] votes)": 4,
    "cc0Mint(uint256 cc0Index, bytes signature)": 4,
    "cease(address poolAddress, uint56 amount)": 1,
    "checkpoint()": 26,
    "checkpoint_gauge(address addr)": 1,
    "chickenOut(uint256 _bondID,uint256 _minLUSD)": 2,
    "claim()": 527,
    "claim(address _account, address _receiver, bool _claimRewards)": 5,
    "claim(address _account, uint256[9] _data, bytes32[] _proof)": 10,
    "claim(address _buyer, uint256 _amount)": 3,
    "claim(address _receiver, uint256 _quantity, address _currency, uint256 _pricePerToken, bytes32[] _proofs, uint256 _proofMaxQuantityPerTransaction)": 1,
    "claim(address _receiver,uint256 _quantity,address _currency,uint256 _pricePerToken,tuple _allowlistProof,bytes _data)": 1,
    "claim(address _token, uint256 _id, uint256 _price, bytes _signature)": 13,
    "claim(address _user, uint256 _pid, uint256[] tokens)": 2,
    "claim(address _user, uint32[] _drawIds, bytes _data)": 11,
    "claim(address account, address token, uint256 claimable, bytes32[] proof, address stake)": 11,
    "claim(address account, uint256 amount, uint8 v, bytes32 r, bytes32 s)": 1,
    "claim(address account, uint256 cumulativeAmount, bytes32 expectedMerkleRoot, bytes32[] merkleProof)": 54,
    "claim(address account,tuple vestingInfo,bytes32[] merkleProof)": 1,
    "claim(address claimer,uint256 amount,tuple proof)": 7,
    "claim(address owner)": 152,
    "claim(address recipient, uint256 totalEarned, uint256 blockNumber, bytes32[] proof)": 3,
    "claim(address to, uint256 amount, bytes32[] proof)": 113,
    "claim(address to, uint256 amount, uint256 startBlockNumber, uint256 endBlockNumber, bytes signature)": 27,
    "claim(address to, uint256 amount, uint256 startBlockNumber, uint256 endBlockNumber, uint256 expTimestamp, bytes signature)": 3,
    "claim(address token, uint256 index, address account, uint256 amount, bytes32[] merkleProof)": 91,
    "claim(address token, uint256[] tokenIndices)": 1,
    "claim(address[] _tokens,address _account,uint256 _startingInterval,uint256 _endingInterval,uint256[] _hints)": 2,
    "claim(address[] recipients, uint256[] amounts)": 1,
    "claim(address[] tokens, uint256[] cumulativeAmounts, uint256 index, uint256 cycle, bytes32[] merkleProof, uint256[] amountsToClaim)": 69,
    "claim(bool _all)": 69,
    "claim(bool reinvest, uint256 minTokens)": 6,
    "claim(bytes name, bytes proof)": 1,
    "claim(bytes signature, uint128 amount)": 1,
    "claim(bytes signature, uint256 tokenQuantity, uint256 allowedQuantity)": 2,
    "claim(bytes32[] _claimProof,bytes signature,uint256 quantity,string nonce)": 1,
    "claim(bytes32[] _merkleProof, uint256 id, uint256 _amount)": 6,
    "claim(bytes32[] _proof, address _who, uint256 _amount)": 7,
    "claim(bytes32[] _proof, uint256 _amount, bool _lock)": 8,
    "claim(bytes32[] _proof,uint256 _amount,bool _lock,address addr)": 4,
    "claim(bytes32[] nodes, uint256 leafIndex)": 3,
    "claim(bytes32[] proof)": 1,
    "claim(string username)": 3,
    "claim(tuple _balances,uint8 v,bytes32 r,bytes32 s)": 1,
    "claim(tuple recipient,uint8 v,bytes32 r,bytes32 s)": 295,
    "claim(tuple request,bytes signature)": 1,
    "claim(tuple[] _claims)": 92,
    "claim(tuple[] claims)": 8,
    "claim(uint16 ref)": 1,
    "claim(uint16[] tokenIds)": 3,
    "claim(uint256 _amount, uint8 _claimNonce, bytes _signature)": 9,
    "claim(uint256 _blockNumber, address forCreditTo)": 38,
    "claim(uint256 _cid, address _starNFT, uint256 _dummyId, uint256 _powah, bytes _signature)": 5,
    "claim(uint256 _index, uint256 _ogAmount, uint256 _wlAmount, bytes32[] _merkleProof, uint256 _amount)": 2,
    "claim(uint256 _wid, uint256 amount)": 10,
    "claim(uint256 amount)": 376,
    "claim(uint256 amount, bytes stakingdata, bytes rewarddata)": 1,
    "claim(uint256 amount,bytes32[] merkleProof,tuple makerAsk,bool isERC721)": 65,
    "claim(uint256 amountV, bytes32 r, bytes32 s)": 6,
    "claim(uint256 amountV, bytes32 r, bytes32 s, address inviter)": 8,
    "claim(uint256 claimer, uint256 amount, bytes sig)": 1,
    "claim(uint256 cycle, uint256 index, address user, address[] tokens, uint256[] cumulativeAmounts, bytes32[] merkleProof)": 2,
    "claim(uint256 deadline, uint256 rewards, bool staking, uint8 v, bytes32 r, bytes32 s)": 2,
    "claim(uint256 fullAmount, bytes32[] proof)": 30,
    "claim(uint256 id,bytes32[] proof,uint256 _allowlistNum,int256 quantity)": 1,
    "claim(uint256 index, address account, address[] tokens, uint256[] amounts, bytes32[] merkleProof)": 38,
    "claim(uint256 index, address account, uint256 OVRLandID, string uri, bytes32[] merkleProof)": 1,
    "claim(uint256 index, address account, uint256 amount, bytes32[] merkleProof)": 162,
    "claim(uint256 index, address account, uint256[] tokenIds, uint256[] tokenQuantities, bytes32[] merkleProof)": 8,
    "claim(uint256 index, uint256 amount, bytes32[] merkleProof)": 18,
    "claim(uint256 index, uint256 amount, bytes32[] merkleProof, uint256 nftId)": 3,
    "claim(uint256 index,address account,uint256 amount,bool revocable,uint256 start,uint256 end,uint256 cadence,uint256 percentageOnStart,bytes32[] merkleProof,uint256 claimAmount)": 3,
    "claim(uint256 merkleIndex, uint256 index, uint256 amount, bytes32[] merkleProof)": 10,
    "claim(uint256 numPasses, uint256 index, uint256 amount, uint256 mpIndex, bytes32[] merkleProof)": 12,
    "claim(uint256 parentId, bytes label)": 1,
    "claim(uint256 pid, uint8 flag)": 1,
    "claim(uint256 totalAmount, uint8 v, bytes32 r, bytes32 s, bool staking)": 3,
    "claim(uint256[] _amountsOverride, uint256[] _amounts, address _receiver, bytes32[] _proof)": 1,
    "claim(uint256[] _chicksIDs, bytes _signature)": 1,
    "claim(uint256[] gen1TokenIds, uint256[] gen2TokenIds, uint256[] gen3TokenIds)": 1,
    "claim(uint256[] tokenIds, bool stake)": 5,
    "claim(uint256[] tokenIndices)": 49,
    "claim(uint32 _id,bytes32 _proof)": 48,
    "claim(uint8[] treeIds, uint256[] amounts, bytes32[][] merkleProofs)": 9,
    "claimAPEX()": 1,
    "claimAgv()": 3,
    "claimAirdropAndDelegate(bytes proof, bytes32 nullifierHash, address delegate)": 1,
    "claimAirdropBoost(uint256 amount,tuple proof)": 2,
    "claimAirdropDaily(uint256[] tokenIds)": 1,
    "claimAirdropOnetime()": 1,
    "claimAll()": 12,
    "claimAll(address beneficiary)": 4,
    "claimAll(address user, address[] comptrollers)": 1,
    "claimAll(uint256 _instId)": 23,
    "claimAll(uint256 _minOut, uint8 _option)": 2,
    "claimAll(uint256 blockNumber, bool toStrongPool)": 4,
    "claimAll(uint256[] poolIds)": 12,
    "claimAllCTR(address _recipient)": 5,
    "claimAllForOwner()": 2,
    "claimAllPendingReward(uint256 records)": 1,
    "claimAllProfits()": 1,
    "claimAllStakingProfits(address[] stakings, address account)": 3,
    "claimAllTokens()": 2,
    "claimAllocation()": 2,
    "claimAndDelegate(uint256 amount, address delegate, uint256 totalGrant, bytes32[] merkleProof, address destination)": 3,
    "claimAndLock(address[] _gauges,tuple _lockStatus)": 9,
    "claimAndLockMulti(tuple[] claims)": 5,
    "claimAndLockSDT(uint256 index,uint256 amount,bytes32[] merkleProof)": 2,
    "claimAndMint(uint256 tokenId,tuple[] tokenData,tuple verification)": 1,
    "claimAndMintBatch(uint256[] animetas_tokens_ids_to_claim, uint256[] animetas_tokens_ids_to_mint, address[] accounts)": 25,
    "claimAndStake(tuple _claim)": 13,
    "claimAndUnstake()": 2,
    "claimAndWithdraw()": 19,
    "claimApeCoin(address nftAsset,uint256[] _nfts)": 3,
    "claimApedTokens(uint256[] _tokenIds)": 1,
    "claimApyAndMint(tuple recipient,uint8 v,bytes32 r,bytes32 s)": 4,
    "claimAs(uint256 index, address account, uint256 amount, bytes32[] merkleProof, uint8 option)": 7,
    "claimAward(uint256 index, address account, uint256 amount, bool revocable, bytes32[] merkleProof)": 1,
    "claimBAYC(uint256[] _nfts, address _recipient)": 1,
    "claimBaby(uint16 siblingId)": 1,
    "claimBalance(uint256 _startIndex, uint256 _endIndex)": 17,
    "claimBananas(uint256[] apeIds)": 1,
    "claimBatch(address wallet, uint256[] nftIds)": 2,
    "claimBayc(uint256 baycTokenId)": 10,
    "claimBaycBakc(uint256 baycTokenId,uint256 bakcTokenId)": 14,
    "claimBeans(uint32[] withdrawals)": 1,
    "claimBot(bytes32[] _proof, uint256 _countMax, uint16 _count)": 1,
    "claimBulk(bytes[] claimArgs)": 2,
    "claimByLootId(uint256 lootTokenId, uint8 inventoryId)": 12,
    "claimByTokenIds(uint256[] tokenIds, uint256 numberOfTokens)": 2,
    "claimByUser(uint256 amount,bytes signature)": 2,
    "claimCULT(uint256 _pid)": 4,
    "claimCheeth(uint256 outcome, bytes signature)": 1,
    "claimCollateral()": 1,
    "claimCollectorMints(uint256[] poawIds, uint256[] brotIds)": 4,
    "claimComp(address holder)": 4,
    "claimComp(address holder, address[] cTokens)": 86,
    "claimComp(address[] holders, address[] cTokens, bool borrowers, bool suppliers)": 14,
    "claimCoordinate(int256 x, int256 y, bool stake)": 29,
    "claimCustomAmountTokens(uint256 amount)": 3,
    "claimDeposit(uint256 _depositId)": 1,
    "claimDistribution(uint256 _option, address _wallet)": 29,
    "claimDistributions(address claimer,tuple[] claims,address[] tokens)": 66,
    "claimDividendsMulti(uint256[] _tokenIds)": 1,
    "claimDomains(uint256[] claimingIds)": 1,
    "claimEthAndPrime(uint256 pid)": 9,
    "claimEthRefund(address _to, uint256 _refundAmount, bytes32[] _merkleProof)": 2,
    "claimEthRewards(address recipient)": 2,
    "claimExtraRewards(address _user)": 3,
    "claimFee()": 1,
    "claimFees()": 295,
    "claimFor(address _account, uint256 _amount)": 5,
    "claimFor(address _from, address _to)": 1,
    "claimForSelf()": 17,
    "claimFounders(uint32 _nonce,uint32 _mintCount,bytes _signature)": 1,
    "claimFromDistributorAsCvx(uint256 index, address account, uint256 amount, bytes32[] merkleProof, uint256 minAmountOut, address to)": 1,
    "claimFromDistributorAsCvxAndLock(uint256 index, address account, uint256 amount, bytes32[] merkleProof, uint256 minAmountOut, address to)": 1,
    "claimFromDistributorAsEth(uint256 index, address account, uint256 amount, bytes32[] merkleProof, uint256 minAmountOut, address to)": 1,
    "claimFromDistributorAsUnderlying(uint256 index, address account, uint256 amount, bytes32[] merkleProof, uint256 assetIndex, uint256 minAmountOut, address to)": 1,
    "claimFromDistributorViaUniV2EthPair(uint256 index, address account, uint256 amount, bytes32[] merkleProof, uint256 minAmountOut, address router, address outputToken, address to)": 2,
    "claimFromParticipantOrder(uint256 auctionId, bytes32[] orders)": 5,
    "claimFromVaultAsUsdt(uint256 amount, uint256 minAmountOut, address to)": 2,
    "claimGlasses()": 1,
    "claimGobbler(bytes32[] proof)": 1,
    "claimHFT(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": 28,
    "claimInitial()": 2,
    "claimInvestorUnlockedTokens()": 8,
    "claimLP()": 3,
    "claimLPToken()": 2,
    "claimLords()": 20,
    "claimMAYC(uint256[] _nfts, address _recipient)": 1,
    "claimMany(uint256[] indices, uint8[] claimTypes, address[] claimants, uint256[] claimableAmounts, uint256[] claimedAmounts, bytes32[][] merkleProofs, uint256[] sentNativeTokens)": 18,
    "claimMany(uint256[] tokenIds)": 32,
    "claimManyFromTowerAndFlight(uint16[] tokenIds, bool unstake)": 1,
    "claimMatchPayout(address _recipient)": 2,
    "claimMayc(uint256 maycTokenId)": 25,
    "claimMaycBakc(uint256 maycTokenId,uint256 bakcTokenId)": 13,
    "claimMerkle(uint256 index, uint256 salt, bytes32[] merkleProof)": 1,
    "claimMint(bytes32 hash, bytes signature, uint256 quantity, uint64 maxTokens, uint64 nonce)": 6,
    "claimMintReward()": 2,
    "claimMissionReward(uint256 missionId, uint256[] rewards, uint256[] rewardQuantities, bytes signature)": 1,
    "claimMulti(address account,tuple[] claims)": 127,
    "claimMulti(uint256[] sssIds)": 1,
    "claimMultipleTokens(bytes32 merkleRoot,tuple claim,bytes32[] proof)": 1,
    "claimMultipleWithNestedMerkle(tuple[] merkleBirds)": 1,
    "claimMushroom()": 1,
    "claimNFT(address _account, uint256[9] _data, bytes32[] _proof)": 1,
    "claimNFT(bytes sig, uint256 blockExpiry, address recipient, uint256 tokenId)": 11,
    "claimNative(address _account,uint256 _claimable,bytes32[] _proof)": 3,
    "claimNative(uint256 stakeIndex, uint40 stakeId)": 5,
    "claimNft()": 8,
    "claimOffchainGrant(bytes proof, address from, address to, uint256 amount, uint256 validity, uint256 nonce)": 22,
    "claimOnBehalf(address recipient)": 24,
    "claimOne(address to, address originContractAddress, string originTokenId, uint256 nonce, bytes signature)": 1,
    "claimOwnTokens()": 3,
    "claimPenguins(uint256[] nftTokenIds, address[] contractAddresses)": 1,
    "claimPhase1(bytes _signature)": 2,
    "claimPrime(uint256 pid)": 18,
    "claimPrimeAndEth(uint256 pid)": 9,
    "claimPrimePools(uint256[] pids)": 16,
    "claimProceeds()": 1,
    "claimRadcoinSigned(address _receiver,address _contractAddr,uint256[] _ids,uint256[] _amounts,bytes _signature)": 1,
    "claimRank(uint256 term)": 16,
    "claimRebate()": 4,
    "claimRefund(address _to, uint256 _refundAmount, bytes32[] _merkleProof)": 1,
    "claimRefund(uint256 _value, bytes32[] _proof)": 8,
    "claimReimbursement()": 1,
    "claimRestake(uint256 extraStakeAmount)": 1,
    "claimReturns(address[] _finalizedStrategies)": 4,
    "claimRevenueDistribution(uint256 _tokenId)": 4,
    "claimReward()": 28,
    "claimReward(address _pair, address _rewardToken)": 7,
    "claimReward(address _receiver)": 6,
    "claimReward(address holder, address[] rTokens)": 3,
    "claimReward(address rewardToken, address to, uint256 amountRequested)": 3,
    "claimReward(address to, address executor, bytes data, bool claim)": 3,
    "claimReward(bytes _rewardRequest, bytes[] _sigs)": 2,
    "claimReward(uint256 _bookingIndex)": 6,
    "claimReward(uint256 tokenId,tuple[] intervals)": 22,
    "claimReward(uint256 unionId, uint256 difficulty, uint256 mineId)": 1,
    "claimRewards()": 12,
    "claimRewards(address _account)": 64,
    "claimRewards(address _to, uint256 _numShares, bytes32[] _merkleProof)": 10,
    "claimRewards(address receiver, bool forceUpdate)": 27,
    "claimRewards(address to, uint256 amount)": 396,
    "claimRewards(address[] _holders, address[] _suppliediTokens, address[] _borrowediTokens)": 25,
    "claimRewards(address[] _tokens)": 6,
    "claimRewards(address[] assets, uint256 amount)": 17,
    "claimRewards(address[] assets, uint256 amount, address to)": 112,
    "claimRewards(address[] holders, address[] cTokens, bool borrowers, bool suppliers)": 24,
    "claimRewards(address[] rewardContracts, address[] extraRewardContracts, address[] tokenRewardContracts, address[] tokenRewardTokens, uint256 depositCrvMaxAmount, uint256 minAmountOut, uint256 depositCvxMaxAmount, uint256 options)": 73,
    "claimRewards(address[] rewardContracts, address[] extraRewardContracts, address[] tokenRewardContracts, address[] tokenRewardTokens, uint256 depositCrvMaxAmount, uint256 minAmountOut, uint256 depositCvxMaxAmount, uint256 spendCvxAmount, uint256 options)": 393,
    "claimRewards(address[] rewardContracts,address[] extraRewardContracts,address[] tokenRewardContracts,address[] tokenRewardTokens,tuple amounts,tuple options)": 2,
    "claimRewards(address[] rewardContracts,address[] extraRewardContracts,address[] tokenRewardContracts,address[] tokenRewardTokens,tuple amounts,uint256 options)": 42,
    "claimRewards(bool claimSafetyRewards, bool claimLiquidityRewards, uint256 merkleCumulativeAmount, bytes32[] merkleProof, bool vestFromTreasuryVester)": 32,
    "claimRewards(bool confirm)": 11,
    "claimRewards(bytes _rewardsRequest, bytes[] _sigs, address[] _signers, uint256[] _powers)": 17,
    "claimRewards(bytes32[] merkleProof)": 2,
    "claimRewards(uint16 maxPeriods)": 4,
    "claimRewards(uint256 _first, uint256 _last)": 46,
    "claimRewards(uint256 _tokenId)": 9,
    "claimRewards(uint256[] _pids)": 14,
    "claimSelfApeCoin()": 26,
    "claimSelfBAKC(tuple[] _baycPairs,tuple[] _maycPairs)": 27,
    "claimSelfBAYC(uint256[] _nfts)": 42,
    "claimSelfMAYC(uint256[] _nfts)": 17,
    "claimShardsFromTokens(uint256[] tokens)": 1,
    "claimShares(address _depositor, uint256 _round)": 1,
    "claimSignedMint(bytes signature,uint256 quantity)": 1,
    "claimSpores(uint16[] packedTokenIdPoolZero_,uint16[] packedTokenIdPoolOne_)": 1,
    "claimSummon(bytes32[] _merkleProof)": 1,
    "claimToken(address token, address to)": 4,
    "claimToken(uint128 _amount)": 25,
    "claimTokenBySeason(address token, uint32 season)": 1,
    "claimTokenRewards(address token)": 2,
    "claimTokens()": 32,
    "claimTokens(address receiver)": 61,
    "claimTokens(address user, address[] tokens)": 62,
    "claimTokens(bytes _signature, address _recipient, uint256 _amount)": 1,
    "claimTokens(bytes32[] merkleProof,uint256 numberOfTokens,uint256 allowance)": 1,
    "claimTokens(uint256 _lockIndex, uint256 _desiredAmount)": 7,
    "claimTokens(uint256 amount, address delegate, bytes32[] merkleProof)": 25,
    "claimTokens(uint256 amount, bytes32[] merkleProof)": 4,
    "claimTokens(uint256 tokensToClaim)": 10,
    "claimTokens(uint256[] claimIds,address depositToWallet)": 2,
    "claimTokens(uint256[] tokenIds)": 2,
    "claimTranche(address _liquidityProvider, uint256 _tranche, uint256 _balance, bytes32[] _merkleProof)": 1,
    "claimTranches(address _liquidityProvider, uint256[] _tranches, uint256[] _balances, bytes32[][] _merkleProofs)": 1,
    "claimUnderlying()": 3,
    "claimUser1()": 2,
    "claimVXs(uint256[] duckTokenIds)": 18,
    "claimVaultRewards()": 9,
    "claimVaultRewardsMultiple(address[] _pools)": 2,
    "claimVessels(uint256[] otherdeedIds)": 3,
    "claimVesselsAndKodas(uint256[] otherdeedIds,uint256[] kodaIds,uint256[] kodaOtherdeedIds,bytes32[][] merkleProofs)": 4,
    "claimVested()": 5,
    "claimVestedTokens()": 18,
    "claimVestedTokens(address recipient)": 6,
    "claimVirtueRefund(address _to, uint256 _refundAmount, bytes32[] _merkleProof)": 2,
    "claimVolts(uint256 voltsEarned, bytes signature)": 1,
    "claimWTF(address _account, uint256[9] _data, bytes32[] _proof)": 11,
    "claimWeek(address _liquidityProvider, uint256 _week, uint256 _claimedBalance, bytes32[] _merkleProof)": 1,
    "claimWeeks(address _liquidityProvider, uint256[] _tranches, uint256[] _balances, bytes32[][] _merkleProofs)": 8,
    "claimWeeks(address _liquidityProvider,tuple[] claims)": 64,
    "claimWithInitializable(uint256[] tokenIds_, uint256[] yieldDatas_, bytes[] signatures_)": 3,
    "claimWool()": 2,
    "claimYieldRewards(bool _useSILV)": 87,
    "claimYieldRewardsMultiple(address[] _pools, bool[] _useSILV)": 78,
    "claim_reward(address gauge, address reward_token)": 343,
    "claim_reward(address user, address gauge, address reward_token)": 5,
    "claim_reward_for(address user,address gauge,address reward_token)": 75,
    "claim_rewards()": 33,
    "claim_rewards(address _addr)": 38,
    "claimphxExpiredReward()": 4,
    "clearDelegate(bytes32 id)": 1,
    "clientDepositL1(uint256 _amount, address _tokenAddress)": 4,
    "clipperSwap(address clipperExchange,address srcToken,address dstToken,uint256 inputAmount,uint256 outputAmount,uint256 goodUntil,bytes32 r,bytes32 vs)": 7,
    "clipperSwap(address srcToken, address dstToken, uint256 amount, uint256 minReturn)": 2,
    "clipperSwapToWithPermit(address clipperExchange,address recipient,address srcToken,address dstToken,uint256 inputAmount,uint256 outputAmount,uint256 goodUntil,bytes32 r,bytes32 vs,bytes permit)": 2,
    "clone(uint256[] nftIds)": 1,
    "closeCreditAccount(address to,uint256 skipTokenMask,bool convertWETH,tuple[] calls)": 2,
    "closeShort(uint256 _vaultId,uint256 _wPowerPerpAmount,uint256 _withdrawAmount,tuple _exactOutputParams)": 4,
    "closeTrove()": 8,
    "collect(address account, uint256 accountAmount, bytes32[] merkleProof, uint256 requestedPackCount, uint256 parallelTransactionID)": 10,
    "collect(address account, uint256 maxAccountAmount, bytes32[] merkleProof, uint256[] requestedTokenIndexes, uint256[] requestedTokenAmounts, uint256 parallelTransactionId)": 4,
    "collect(tuple params)": 74,
    "collectReward(address beneficiary, uint256 amountRequested)": 1,
    "collectReward(uint256 stage)": 1,
    "collectRewards()": 1,
    "collectedlistMint(uint256 quantity)": 8,
    "commissionNftWl(address token,uint256[] ids,string[] names)": 4,
    "commissionWl(string name,bytes32[] proof)": 1,
    "commit(bytes32)": 117,
    "commitAndEmitEncryptedVote(bytes32 identifier, uint256 time, bytes ancillaryData, bytes32 hash, bytes encryptedVote)": 4,
    "commitETH()": 2,
    "commitManyNFTAndAddTime(uint256[] packedTokenIdPoolZero_,uint256[] packedTokenIdPoolOne_,uint32 poolZeroEpochs_,uint32 poolOneEpochs_)": 10,
    "completeTransfer(bytes encodedVm)": 93,
    "completeTransferAndUnwrapETH(bytes encodedVm)": 16,
    "completeUserQuests(address _account, uint256[] _ids, bytes _signature)": 1,
    "completeWithdraw()": 29,
    "completeWithdraw(uint256 minETHOut)": 1,
    "completeWithdrawal(address collateral)": 3,
    "completeWithdrawal(uint256 amountOut, address recipient)": 1,
    "compound()": 3,
    "compoundRewards()": 3,
    "configure(tuple _config)": 1,
    "confirmTransaction(uint256 transactionId)": 281,
    "confirmWithdrawalAddress(address _nodeAddress)": 2,
    "contribute()": 7,
    "contribute(address _sender, uint256 _bountyId, uint256 _amount)": 2,
    "contribute(address contributor)": 1,
    "contributeMint(address to, bytes32[] proof)": 1,
    "convert(address _token, uint256 _amount)": 1,
    "convert(uint256 _amount)": 1,
    "convert(uint256 amount, uint256 conversionRate)": 7,
    "convertByPath(address[] _path, uint256 _amount, uint256 _minReturn, address _beneficiary, address _affiliateAccount, uint256 _affiliateFee)": 89,
    "convertToV2(uint256 v1Amount)": 1,
    "convertV1(address _to,uint256 _amount)": 1,
    "cook(uint8[] actions, uint256[] values, bytes[] datas)": 259,
    "cooldown()": 112,
    "craft(uint256 tokenId,uint256[] kzgTokenIds,uint256[] kubzTokenIds,uint256[] burnRelicTokenIds)": 5,
    "craftItemBatch(uint256[] tokenIds, uint256[] quantities)": 2,
    "craftUsingPotions(uint256 tokenId,uint256[] kzgTokenIds,uint256[] kubzTokenIds,uint256[] burnRelicTokenIds,uint256 myPotions,bytes signature)": 3,
    "create(string name, string symbol, address[] tokens, uint256[] weights, uint256 swapFeePercentage, address owner)": 1,
    "create(uint256 _originalTokenId,tuple[] _batchedOrders)": 1,
    "createBid(address _tokenContract, uint256 _tokenId)": 3,
    "createBid(uint256 auctionId, uint256 amount)": 53,
    "createBid(uint256 tokenId)": 552,
    "createBondWithPermit(address owner,uint256 amount,uint256 deadline,uint8 v,bytes32 r,bytes32 s)": 6,
    "createBribe(address gauge,address manager,address rewardToken,uint8 numberOfPeriods,uint256 maxRewardPerVote,uint256 totalRewardAmount,address[] blacklist,bool upgradeable)": 3,
    "createBuyOrder(uint256 _purchaseAmount,address _paymentToken)": 1,
    "createCampaign(address _tokenAddress, uint256 _linksAmount, uint256 _amountPerLink)": 1,
    "createCitizen(uint256 identityId, uint256 itemCacheId, uint256 landDeedId, bool genderFemale, string specialMessage)": 1,
    "createEstateWithMetadata(int256[] x, int256[] y, address beneficiary, string metadata)": 1,
    "createFlow(address token, address sender, address receiver, int96 flowrate, bytes userData)": 1,
    "createForwarder()": 966,
    "createLoan(tuple _offer,bytes _signature)": 1,
    "createLock(uint256 amount, uint256 end)": 6,
    "createMarketSale(uint256 itemId, uint256 _price)": 6,
    "createNode(string name, string desc, uint256 amount)": 2,
    "createNode(uint256 _nodeType, bool _useCredit)": 1,
    "createOrder(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiresAt)": 47,
    "createOrder(tuple order)": 50,
    "createOverride()": 1,
    "createPairETH(address _nft, address _bondingCurve, address _assetRecipient, uint8 _poolType, uint128 _delta, uint96 _fee, uint128 _spotPrice, uint256[] _initialNFTIDs)": 75,
    "createProxyWithNonce(address _mastercopy, bytes initializer, uint256 saltNonce)": 7,
    "createStake(uint256 stake)": 3,
    "createStream(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime)": 2,
    "createVault()": 1,
    "createVault(uint256 _templateId)": 31,
    "createWithEther()": 1,
    "create_lock(uint256 _value, uint256 _unlock_time)": 63,
    "create_lock_for(uint256 _value, uint256 _lock_duration, address _to)": 21,
    "cryptoArteHolderMint(bytes signature, string mode, string style, uint8 var1, uint8 var2, bool blackBackground, bool displayAddress)": 1,
    "crystalMutationMint(bytes signature_, bytes32 salt_, uint32 originalTokenId_, uint8 crystalTokenId_)": 2,
    "deal(uint256 id)": 8,
    "decreaseLiquidityAndCollect(tuple params)": 1,
    "defaultDecayPeriodVote(uint256 vote)": 1,
    "defaultFeeVote(uint256 vote)": 1,
    "defaultSlippageFeeVote(uint256 vote)": 1,
    "delegate(address miner, uint256 _value)": 50,
    "delegate(address to)": 94,
    "delegate(uint256 validatorId, uint256 amount, uint256 delegationPeriod, string info)": 4,
    "delegateByType(address delegatee, uint8 delegationType)": 14,
    "delegateForAll(address delegate, bool value)": 2,
    "delegateForToken(address delegate, address collection, uint256 tokenId, bool value)": 6,
    "delegateStake(address _staker, uint256 _amount)": 2,
    "delegateTo(uint256 id,address newDelegate)": 1,
    "deleverageAndWithdraw(address vaultAddr_, uint256 deleverageAmt_, uint256 withdrawAmount_, address to_, uint256 unitAmt_, bytes swapData_, uint256 route_, bytes instaData_)": 3,
    "deployVault(address[] _modules, address[] plugins, bytes4[] selectors, bytes32[] _mintProof, address _descriptor, uint256 _nounId)": 1,
    "deposit()": 566,
    "deposit(address _lendToken, address _collateralToken, uint256 _amountDeposit)": 14,
    "deposit(address _reserve, uint256 _amount, uint16 _referralCode)": 1,
    "deposit(address _token, uint256 _amount, uint64 _mintChainId, address _mintAccount, uint64 _nonce)": 26,
    "deposit(address _tornado, bytes32 _commitment, bytes _encryptedNote)": 13,
    "deposit(address asset, address recipient, uint128 amount, bool claim)": 4,
    "deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode)": 859,
    "deposit(address from, address to, address tokenAddress, uint96 amount, bytes extraData)": 45,
    "deposit(address receiver, uint256 numTokens, bool chargeGas)": 7,
    "deposit(address recipient, address originToken, uint256 amount, uint256 destinationChainId, uint64 relayerFeePct, uint32 quoteTimestamp)": 14,
    "deposit(address token, address beneficiary, uint256 initialTransferAmount, uint256 releaseAmount, uint256 releaseTime)": 4,
    "deposit(address token, uint256 amount)": 71,
    "deposit(address token, uint256 amount, address receiver)": 3,
    "deposit(address token, uint256 amount, uint8 to, bool bonus, bytes receiver)": 22,
    "deposit(address token,address forAddress,uint8 round,uint256[5] extraParameters,bytes reqId,tuple[] sigs)": 3,
    "deposit(address tokenAddress, uint256 amount, address receiverAddress, uint256 targetChainId)": 6,
    "deposit(address token_, address from, address to, uint256 amount, uint256 share)": 7,
    "deposit(address vault, address asset, uint256 amount, string memo)": 53,
    "deposit(address[] vaultStrategies, uint128 amount, bool transferFromVault)": 2,
    "deposit(bytes deposit_input)": 1,
    "deposit(bytes pubkey, bytes withdrawal_credentials, bytes signature, bytes32 deposit_data_root)": 21,
    "deposit(bytes[] pubkeys, bytes[] withdrawal_credentials, bytes[] signatures, bytes32[] deposit_data_roots)": 2,
    "deposit(tuple _params)": 2,
    "deposit(tuple depositData)": 2,
    "deposit(tuple depositParams)": 8,
    "deposit(tuple tokenInfo,bytes32[] proof)": 2,
    "deposit(uint256 _amount, bool _lock, address _stakeAddress)": 41,
    "deposit(uint256 _amount, bool _lock, bool _stake)": 7,
    "deposit(uint256 _amount, bool _lock, bool _stake, address _user)": 7,
    "deposit(uint256 _amount0, uint256 _amount1, bool _zapFunds, bool _sweep, uint256 _sqrtRatioX96, uint256 _tolerance)": 2,
    "deposit(uint256 _deposits, uint256 actualSellPriceInWei, uint256 _actualPriceInCents)": 32,
    "deposit(uint256 _id, uint256 _amount, uint256 _maxPrice, address _user, address _referral)": 4,
    "deposit(uint256 _minimumNodeFee, bytes _validatorPubkey, bytes _validatorSignature, bytes32 _depositDataRoot, uint256 _salt, address _expectedMinipoolAddress)": 1,
    "deposit(uint256 _pid, address _lpToken, uint256 _amount)": 1,
    "deposit(uint256 _pid, uint256 _amount, address _ref)": 131,
    "deposit(uint256 _pid, uint256 _amount, address _to, address _referrer)": 2,
    "deposit(uint256 _pid, uint256 _amount, bool _boost, address _referrer)": 1,
    "deposit(uint256 _pid, uint256 _amount, bool _withdrawRewards)": 139,
    "deposit(uint256 _pid, uint256 _amount, uint256 _harvestBlock, uint256 _yield)": 8,
    "deposit(uint256 _pubkey1, uint256 _pubkey2)": 425,
    "deposit(uint256 _value, address _addr, bool _claim_rewards)": 1,
    "deposit(uint256 _vaultId, uint8 _tranche, uint256 _amount)": 1,
    "deposit(uint256 amount, bytes32[] merkleProof)": 20,
    "deposit(uint256 assets, address receiver, bool shouldCompound, address developer)": 3,
    "deposit(uint256 depositAmount, uint256 starkKey, uint256 positionId, bytes signature)": 1,
    "deposit(uint256 depositAmount, uint64 maturationTimestamp)": 5,
    "deposit(uint256 pid, address wantAddress, uint256 wantAmt, address ref)": 3,
    "deposit(uint256 pid, uint256 amount, uint64 lockLength)": 3,
    "deposit(uint256 tokenId, uint256[] amounts)": 1,
    "deposit(uint256 unifiedTokenAmount, bool flag)": 227,
    "deposit(uint256 userId, address userAddress)": 52,
    "deposit(uint256 visrDeposit, address from, address to)": 4,
    "deposit(uint256 vowID)": 584,
    "deposit(uint256[2] maxAmounts, uint256[2] minAmounts)": 4,
    "deposit(uint256[4] _amounts, uint256 _minOut, bool _mintIbbtc)": 4,
    "deposit(uint256[] amounts)": 9,
    "deposit(uint48 _id, uint256[2] _amounts, address[2] _addresses)": 1,
    "deposit(uint8 _lockType, uint256 _amount, bool _comp)": 2,
    "deposit(uint8 destinationChainID, bytes32 resourceID, bytes data)": 28,
    "deposit(uint8 pid,uint256 amount,uint32 duration)": 1,
    "deposit(uint96 depositAmount)": 3,
    "depositAA(uint256 _amount)": 2,
    "depositAll()": 10,
    "depositAll(uint256 _pid, bool _stake)": 397,
    "depositAndJoin(uint256 id, uint256 tokenAmount)": 7,
    "depositAndOptIn(uint256 amount,uint256 tokenId,address[] optInPools)": 4,
    "depositAndPlaceOrder(uint256 auctionId, uint96[] _minBuyAmounts, bytes32[] _prevSellOrders, bytes allowListCallData)": 2,
    "depositAndStake(uint256 amount)": 3,
    "depositAndStake(uint256 amount, address[] _contracts, uint256[] _stakes)": 6,
    "depositBAKC(tuple[] _baycPairs,tuple[] _maycPairs)": 20,
    "depositBAYC(tuple[] _nfts)": 15,
    "depositBB(uint256 _amount)": 1,
    "depositBeans(uint256 amount)": 4,
    "depositBribe(address _token, uint256 _amount, bytes32 _proposal, uint256 _choiceIndex)": 6,
    "depositCard(uint256 _idx)": 1,
    "depositCollateral(address account, uint256 loanID)": 2,
    "depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _l2Gas, bytes _data)": 83,
    "depositERC20(address _token, uint104 _amount, address _zkSyncAddress)": 9,
    "depositERC20(address tokenFrom, uint256 tokenFromAmount, uint256 starkKey, uint256 positionId, address exchangeProxy, bytes exchangeProxyData, bytes signature)": 2,
    "depositERC20For(address _user, address _token, uint256 _amount)": 17,
    "depositERC20ForUser(address _token, address _user, uint256 _amount)": 19,
    "depositERC20ToByChainId(uint256 _chainid, address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes _data)": 41,
    "depositETH()": 17,
    "depositETH(address lendingPool, address onBehalfOf, uint16 referralCode)": 584,
    "depositETH(address onBehalfOf)": 16,
    "depositETH(address onBehalfOf, uint16 referralCode)": 34,
    "depositETH(address to, uint256 chainId, uint256 amount)": 2,
    "depositETH(uint256 _pid)": 4,
    "depositETH(uint32 _l2Gas, bytes _data)": 88,
    "depositETHAndSwap(address to, uint256 chainId, uint256 amount, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 minDy, uint256 deadline)": 31,
    "depositETHToByChainId(uint256 _chainId, address _to, uint32 _l2Gas, bytes _data)": 12,
    "depositEth()": 94,
    "depositEth(uint256 _requestId)": 117,
    "depositEthFor(address target)": 12,
    "depositEther()": 3,
    "depositEtherFor(address _to)": 55,
    "depositFor(address _user, uint256 amount, uint256 stakeType, bool _exit)": 3,
    "depositFor(address user, address rootToken, bytes depositData)": 329,
    "depositFromUCrv(uint256 amount,uint256 minAmountOut,address to)": 1,
    "depositFromUFxs(uint256 amount,uint256 minAmountOut,address to)": 1,
    "depositFromUnderlyingAssets(uint256[2] amounts, uint256 minAmountOut, address to)": 4,
    "depositFunds(uint256 amountIn, bytes signature, address recipient)": 1,
    "depositFunds(uint256 amountIn,bytes signature,address recipient,tuple permit)": 1,
    "depositGameKey(uint256[] _ids)": 1,
    "depositGvt(uint256[3] inAmounts, uint256 minAmount, address _referral)": 1,
    "depositIZI(uint256 tokenId, uint256 deltaNIZI)": 1,
    "depositLiquidity(uint256 amount)": 1,
    "depositMAYC(tuple[] _nfts)": 18,
    "depositMultiple(uint256[] strikeIndices, uint256[] amounts, address user)": 1,
    "depositNFTs(address _nft, uint256[] ids, address recipient)": 41,
    "depositNative(string _targetAddress, string chain)": 226,
    "depositNativeToken(uint256 destinationChainId, address _to)": 1,
    "depositPSPAndEth(uint256 pspAmount,uint256 minBptOut,bytes pspPermit)": 2,
    "depositPSPAndWeth(uint256 pspAmount,uint256 wethAmount,uint256 minBptOut,bytes pspPermit)": 1,
    "depositPendingFunds(uint256 assetId, uint256 amount, address depositorAddress)": 3,
    "depositPendingFunds(uint256 assetId, uint256 amount, address owner, bytes32 proofHash)": 11,
    "depositPoolToken(address _pool, address _outputToken, uint256 _poolAmount)": 6,
    "depositSPSPsForSePSP(tuple[] reqs)": 1,
    "depositSelfApeCoin(uint256 _amount)": 38,
    "depositStkPSPBptForSePSP2(uint256 bptAmount,bytes stkPSPBptPermit)": 2,
    "depositTo(address beneficiary, uint256 tokens)": 2,
    "depositTo(address onBehalfOf, address token, uint256 amount)": 2,
    "depositTo(address to, uint256 amount, address controlledToken, address referrer)": 1,
    "depositTo(uint256 _pid, uint256 _depositAmount, uint256 _maxPrice, address _to)": 1,
    "depositToAndDelegate(address _to, uint256 _amount, address _delegate)": 1,
    "depositToEVM(string ethRecipientOnNear, uint256 fee)": 31,
    "depositToLido()": 1,
    "depositToLido(uint256 maxFeeRate)": 1,
    "depositToNear(string nearRecipientAccountId, uint256 fee)": 8,
    "depositToken(address _token, uint256 value, string _targetAddress, string chain)": 409,
    "depositToken(address token, string toChain, bytes toAddr, uint256 amount)": 1,
    "depositTokens(address _token, uint256 _time, uint256 _amount)": 1,
    "depositUnderlying(address alchemist, address yieldToken, uint256 amount, address recipient, uint256 minimumAmountOut)": 2,
    "depositUnderlying(address yieldToken, uint256 amount, address recipient, uint256 minimumAmountOut)": 6,
    "depositUnderlying(uint256 amount)": 2,
    "depositUnderlyingToken(address account, uint16 currencyId, uint256 amountExternalPrecision)": 2,
    "depositUniPosition(address _account, uint256 _positionID)": 2,
    "depositWithExpiry(address vault, address asset, uint256 amount, string memo, uint256 expiration)": 3,
    "depositWithPermit(uint256 _amount, bytes _signatureData)": 1,
    "depositWithPermit(uint256 _amount, uint256 _deadline, bytes _signature)": 13,
    "depositWithPermit(uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s)": 4,
    "depositWithPermit(uint256 _pid, uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s)": 1,
    "depositWithPermit(uint256 amount, address recipient, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": 4,
    "depositWithPermit(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount, address tokenAddress, uint256 quantum, uint256 permitValue, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": 1,
    "depositWithPermitAndStake(uint256 usdcAmount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": 2,
    "depositWithRewards(uint256 lpTokenAmount, uint256 crvAmount, uint256 cvxAmount, uint256 minAmountOut, address to)": 3,
    "depositWithSignature(uint256 assets,address receiver,uint256 deadline,bool approveMax,uint8 v,bytes32 r,bytes32 s)": 2,
    "depositYieldToken(uint256 amount)": 1,
    "deposit_and_stake(address deposit, address lp_token, address gauge, uint256 n_coins, address[5] coins, uint256[5] amounts, uint256 min_mint_amount, bool use_underlying, address pool)": 3,
    "deregister(address handler)": 8,
    "directMint(bytes32[] proof_, uint256[] votes_)": 2,
    "discardDecayPeriodVote()": 2,
    "discountedMint(tuple whitelistSpot,bytes token,uint16 discounts,uint16 fullDiscounts,uint256 amount)": 5,
    "disperseToken(address token, address[] recipients, uint256[] values)": 9,
    "distribute()": 11,
    "dock(uint256 shipId,uint256 asteroidId)": 3,
    "donate(tuple[] _donations)": 4,
    "drawDown()": 1,
    "earlyAccessSale(uint256 stage, uint256 amount, uint256 index, uint256 maxAmount, bytes32[] merkleProof)": 1,
    "earlyMintProducerPass(uint256 episodeId, uint256 amountAllowed, uint256 amountMinting, bytes32[] merkleProof)": 1,
    "echelonReceive(uint256 _type, uint256 _id, uint256 _primeValue, uint256[] _nftIds, uint256[] _nftQuantities, bytes _data)": 75,
    "embarkWithRecipient(uint256 amount,address recipient)": 1,
    "emergencyWithdraw(address _pair)": 1,
    "emergencyWithdraw(uint256 _pid)": 9,
    "encashCheque(address beneficiary,uint256 amount,uint64 hardLockUntil,uint64 softLockUntil,uint64 allowedHops,bytes32[2] signature)": 1,
    "endAuction(uint256 _tixnumberforsale)": 4,
    "enter(uint256 userSeed)": 79,
    "enterBidForGod(uint256 _godId)": 3,
    "enterBidForPunk(uint256 punkIndex)": 29,
    "enterFirstAuction(uint256 _requestAmount)": 7,
    "enterMarkets(address[] cTokens)": 51,
    "enterSecondAuction(uint256 _requestAmount)": 5,
    "enterWithPermit(uint256 _pspAmount, bytes permit)": 3,
    "esemblSNAK(uint256 yurGoblino, uint256 frize, uint256 slop, uint256 meet, uint256 meltee, uint256 stuf, uint256 grippe)": 7,
    "exactInput(tuple params)": 203,
    "exactInputSingle(tuple params)": 172,
    "exactOutput(tuple params)": 100,
    "exactOutputSingle(tuple params)": 29,
    "exchange(address _partner, uint256 _amount)": 1,
    "exchange(int128 i, int128 j, uint256 dx, uint256 min_dy)": 351,
    "exchange(uint256 _amount, address[6] _route, uint256[8] _indices, uint256 _min_received)": 150,
    "exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy)": 74,
    "exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth)": 86,
    "exchange(uint256 total)": 13,
    "exchange(uint256[] fromIds, string color)": 6,
    "exchangeAtomically(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, bytes32 trackingCode, uint256 minAmount)": 27,
    "exchangeEthAndBuyShares(address _comptrollerProxy, address _denominationAsset, uint256 _minSharesQuantity, address _exchange, address _exchangeApproveTarget, bytes _exchangeData, uint256 _minInvestmentAmount)": 3,
    "exchangeThalesToL2OpThales(uint256 amount)": 4,
    "exchangeWithTracking(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address originator, bytes32 trackingCode)": 20,
    "exchange_multiple(address[9] _route, uint256[3][4] _swap_params, uint256 _amount, uint256 _expected, address[4] _pools)": 387,
    "exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy)": 382,
    "exchange_underlying(uint256 i, uint256 j, uint256 dx, uint256 min_dy)": 44,
    "execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures)": 4003,
    "execute(address _target, bytes _data)": 785,
    "execute(bytes commands,bytes[] inputs,uint256 deadline)": 2385,
    "execute(bytes payload, bytes[] signatures)": 9,
    "execute(tuple sell,tuple buy)": 100,
    "execute(tuple[] executions)": 1,
    "execute(tuple[] txns,bytes signature)": 212,
    "execute(uint256 _value, address _to, bytes _data)": 53,
    "execute(uint256 id)": 1,
    "executeMigration(bytes32[] _proof, uint256 _index, uint248 _yieldWeight, uint256 _pendingV1Rewards, bool _useSILV, uint256[] _stakeIds)": 20,
    "executeOrder(address nftAddress, uint256 assetId, uint256 price)": 4,
    "executeProposalWithIndex(string proposalId, bytes32[] txHashes, address to, uint256 value, bytes data, uint8 operation, uint256 txIndex)": 2,
    "executeSignatures(bytes message, bytes signatures)": 6,
    "executeTransaction(bytes32[] proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)": 12,
    "executeTransaction(uint256 outboxIndex, bytes32[] proof, uint256 index, address l2Sender, address destAddr, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 amount, bytes calldataForL1)": 78,
    "executeWithdrawal()": 3,
    "exit()": 117,
    "exit(address gem, uint256 wad)": 4,
    "exit(bytes inputData)": 265,
    "exit(uint256 nftId, uint256[] pIds, uint256[] liqs)": 6,
    "exit(uint256 tokenId, address[] tokens)": 1,
    "exit(uint256 wad)": 17,
    "exitMarket(address cTokenAddress)": 8,
    "exitPool(bytes32 poolId, address sender, address recipient, tuple request)": 140,
    "exitPool(uint256 poolAmountIn, uint256[] minAmountsOut)": 23,
    "exitSenior(uint256 amountSeniorTokens)": 2,
    "exitShip(uint256[] _tokenIds)": 2,
    "exitWithoutRewards(uint256[] tokenIds)": 2,
    "exitswapPoolAmountIn(address tokenOut, uint256 poolAmountIn, uint256 minAmountOut)": 2,
    "externalClaim(tuple _claim,bytes _signature)": 1,
    "externalSwap(address fromToken, address toToken, address approveTarget, address swapTarget, uint256 fromTokenAmount, uint256 minReturnAmount, bytes callDataConcat, bool isIncentive, uint256 deadLine)": 27,
    "fBuy(uint8 _pRole, uint8 _pPoolType, uint256 _pFromId, uint256 _pToId, uint256 _pMaxAmount, uint256 _pSignatureTime, bytes _pSignature)": 1,
    "farm(bytes[] data)": 6,
    "fillAsk(address _tokenContract, uint256 _tokenId, address _fillCurrency, uint256 _fillAmount, address _finder)": 1,
    "fillOrder(tuple agreement,tuple bid,bytes bidSignature,uint8 bidSignatureKind,tuple ask,bytes askSignature,uint8 askSignatureKind)": 3,
    "fillOrder(tuple order,bytes signature,bytes interaction,uint256 makingAmount,uint256 takingAmount,uint256 skipPermitAndThresholdAmount)": 1,
    "fillOrder(tuple order,uint256 takerAssetFillAmount,bytes signature)": 20,
    "fillOrderRFQ(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount)": 113,
    "fillOrderRFQCompact(tuple order,bytes32 r,bytes32 vs,uint256 flagsAndAmount)": 4,
    "fillOrderRFQToWithPermit(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount,address target,bytes permit)": 11,
    "fillOtcOrder(tuple order,tuple makerSignature,uint128 takerTokenFillAmount)": 18,
    "fillOtcOrderForEth(tuple order,tuple makerSignature,uint128 takerTokenFillAmount)": 13,
    "fillOtcOrderWithEth(tuple order,tuple makerSignature)": 5,
    "fillRfqOrder(tuple order,tuple signature,uint128 takerTokenFillAmount)": 285,
    "finalizeAssets()": 2,
    "finalizeReserveAuction(uint256 auctionId)": 5,
    "finalizeWithdrawal()": 1,
    "finishWithdrawal(uint256[] withdrawalIds)": 1,
    "firstUnlock(uint256 _index, address _account, uint256 _amount, bytes32[] _merkleProof)": 1,
    "flashLoan(address receiverAddress, address[] assets, uint256[] amounts, uint256[] modes, address onBehalfOf, bytes params, uint16 referralCode)": 8,
    "flashLoan(address receiverAddress, uint256[] nftTokenIds, bytes params)": 1,
    "flashStake(address _strategyAddress, uint256 _tokenAmount, uint256 _stakeDuration, uint256 _minimumReceived, address _yieldTo, bool _mintNFT)": 1,
    "flushForwarderTokens(address forwarderAddress, address tokenContractAddress)": 3102,
    "forceTransmute(address toTransmute)": 1,
    "forgeToken(uint256 tokenId, uint256 amount)": 3,
    "forgeToken(uint256[] tokenIds, uint256[] amounts)": 7,
    "free(uint256 wad)": 6,
    "freeClaimMint(uint256[] _tokenIDs)": 11,
    "freeWLMint(uint256 numberOfTokens)": 1,
    "friendMint(uint256 quantity)": 1,
    "fulfill(tuple args)": 1,
    "fulfillAvailableAdvancedOrders(tuple params)": 1,
    "fulfillAvailableAdvancedOrders(tuple[] advancedOrders, tuple[] criteriaResolvers, tuple[][] offerFulfillments, tuple[][] considerationFulfillments, bytes32 fulfillerConduitKey, address recipient, uint256 maximumFulfilled)": 119,
    "fulfillAvailableOrders(tuple[] orders, tuple[][] offerFulfillments, tuple[][] considerationFulfillments, bytes32 fulfillerConduitKey, uint256 maximumFulfilled)": 215,
    "fulfillOrder(tuple order, bytes32 fulfillerConduitKey)": 13,
    "fundCalladita(uint8 _tier, uint256 _tokenAmount)": 1,
    "fusion(uint256 matronId, uint256 sireId)": 2,
    "gatedMintEdition721(tuple _claim,bytes _signature,address _recipient)": 1,
    "generalMint(uint256 numKarmas, bytes32[] merkleProof)": 1,
    "generateDeposit(uint256[2] _pubkey, uint256 _random, uint256 _amount, address _tokenField)": 1,
    "generateToken()": 1,
    "genesisKeyClaimProfile(string profileUrl, uint256 tokenId, address recipient, bytes32 hash, bytes signature)": 26,
    "getAllRewards()": 4,
    "getApesFromAgency(uint256[] ids)": 1,
    "getMyReward()": 11,
    "getPoints(uint256 wave, uint256 amount, uint256 key, bytes32[] merkleProof)": 1,
    "getReward()": 409,
    "getReward(address _account, bool _claimExtras)": 461,
    "getReward(address _rewardToken, address _account)": 4,
    "getReward(address a)": 176,
    "getReward(address account, address[] tokens)": 4,
    "getReward(bool isUni)": 25,
    "getReward(uint256 currentTime)": 9,
    "getReward2(address destination_address, bool claim_extra_too)": 1,
    "getRewards()": 43,
    "getRewards(address[] _addresses)": 1,
    "getRewards(uint256 _hatchingPrice)": 6,
    "getRoyaltyShares(uint256 _tokenId)": 13,
    "getTokenReward(address account)": 133,
    "getUnclaimedRewardsByMarkets(address user, address[] markets, address[] flywheels, bool[] accrue)": 2,
    "getVirtue(uint256 _stethAmt, uint256 _minVirtue)": 2,
    "getYield()": 59,
    "goLight(uint256 _classicAmountToDeposit)": 12,
    "goldUpgrade(uint256[] tokenIds,bytes sig)": 10,
    "governanceShareVote(uint256 vote)": 1,
    "harvest()": 276,
    "harvest(address reserve, uint256 amount)": 2,
    "harvest(uint256 _amount, uint256 _lastBlockNumber, uint256 _currentBlockNumber, bytes32 _msgForSign, bytes _signature, address _rewardToken)": 6,
    "harvest(uint256 _pid)": 5,
    "harvest(uint256 _pid, address _account)": 231,
    "harvestConcentratorCompounder(address _compounder,uint256 _minAssets)": 1,
    "harvestConcentratorVault(address _vault,uint256 _pid,uint256 _minOut)": 1,
    "harvestFromConvex()": 2,
    "harvestMultiplePools(uint256[] nftIds, bytes[] datas)": 6,
    "hdrnStakeStart(uint256 amount)": 1,
    "heartbeat(uint64 _maxRequestedTransitions)": 5,
    "hezToMatic(uint256 hezAmount, bytes _permitData)": 1,
    "holderFree(uint8 numberOfTokens)": 1,
    "holderMintNew(uint256 quantity,bytes signature)": 1,
    "holderPresale(uint8 numberOfTokens)": 1,
    "hope(address usr)": 7,
    "identifyAndDock(uint256 emissionId,uint256 index,uint256 shipId)": 9,
    "identityClaim(uint256 identityTokenId, uint256 spotOnLeaderboard, uint256 spotInWhitelist, bytes32[] proof)": 1,
    "importPosition(uint256 route_,uint256 deleverageWETHAmount_,uint256 withdrawStETHAmount_,address receiver_)": 4,
    "increaseAllowance(address spender, uint256 value)": 20,
    "increaseAmount(uint256 _value)": 4,
    "increaseApproval(address _spender, uint256 _addedValue)": 3,
    "increaseBribeDuration(uint256 _bribeId,uint8 _additionnalPeriods,uint256 _increasedAmount,uint256 _newMaxPricePerVote)": 1,
    "increaseBribeDuration(uint256 _bribeId,uint8 _additionnalPeriods,uint256 _increasedAmount,uint256 _newMaxPricePerVote,address[] _addressesBlacklisted)": 4,
    "increaseCustodyAllowance(address custodian, uint256 amount)": 7,
    "increaseDebt(uint256 amount)": 1,
    "increaseLiquidity(tuple params)": 53,
    "increaseLockAmount(uint256 _value)": 3,
    "increaseLockPosition(uint128 additionalAmountToLock,uint128 newExpiry)": 37,
    "increaseLockPositionAndBroadcast(uint128 additionalAmountToLock,uint128 newExpiry,uint256[] chainIds)": 4,
    "increaseNonce()": 17,
    "increaseNonce(uint8 series)": 9,
    "increaseVirtueStake(uint256 _virtueTokenAmt)": 6,
    "increase_amount(uint256 _tokenId, uint256 _value)": 4,
    "increase_amount(uint256 _value)": 74,
    "increase_unlock_time(uint256 _tokenId, uint256 _lock_duration)": 17,
    "increase_unlock_time(uint256 _unlock_time)": 76,
    "incrementCounter()": 3,
    "incrementNonce()": 1,
    "infectApe(uint256 apeId, uint256 bananaType)": 2,
    "initWithdraw(uint256 _amount)": 7,
    "initWithdrawal(address poolToken, uint256 poolTokenAmount)": 24,
    "initialStake(uint256 _amount, uint256 _period, address _receiver)": 1,
    "initialStake(uint256[] tokenIds, uint256[] weights, address stakeTo, uint16 _deposit, uint16 _rentalPerDay, uint16 _minRentDays, uint32 _rentableUntil, uint32 _maxTimestamp, bytes _signature)": 12,
    "initialiseFeeDistributor()": 1,
    "initializeAndClaim(address to, uint96 amount1, uint96 amount2, bytes32[] merkleProof)": 11,
    "initializeBundle(address to)": 1,
    "initializeLoan(tuple loanTerms,address borrower,address lender,tuple sig,uint160 nonce)": 1,
    "initiateGangsters(uint256[] tokenIds_)": 5,
    "initiateWithdraw(uint256 numShares)": 30,
    "initiateWithdrawal(uint256 withdrawAmount)": 8,
    "instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to)": 27,
    "intendToUnstake()": 2,
    "intendToWithdraw()": 26,
    "invalidateOrder(tuple order)": 2,
    "invoke(bytes32[] actions,bytes[] data)": 4,
    "invoke(uint256[] actions, bytes[] data)": 4,
    "invokeEchelon(address _handlerAddress, uint256 _id, uint256 _primeValue, bytes _data)": 1,
    "issue(address _setToken, uint256 _quantity, address _to)": 1,
    "issueMaxSynths()": 44,
    "issueNFT(uint256 _stakeId)": 1,
    "issueSynths(uint256 amount)": 2,
    "itsabrgrr(uint256 ORDURRnumbr, uint256[] stuffs, uint256 frize, uint256 slop, uint256 meet, uint256 meltee, uint256 stuf, uint256 gripee)": 2,
    "join(address user, uint256 amount)": 3,
    "join(uint256 _gid, uint256 _amount)": 11,
    "join(uint256 nftId, uint256[] pIds, uint256[] liqs)": 8,
    "join(uint256 wad)": 12,
    "joinPack(uint256[] tokenIds, uint256 pack)": 13,
    "joinPool(bytes32 poolId, address sender, address recipient, tuple request)": 282,
    "keyMint(uint256 _amount)": 1,
    "killBounty(uint256 _bountyId)": 1,
    "kpMachineMint(uint256[] ids)": 1,
    "kubzClaimMultiple(uint256[] kubzTokenIds,uint256[] rarities,bytes[] signatures)": 1,
    "landClaim(uint256 identityTokenId, uint256 spotOnLeaderboard, uint256 spotInWhitelist, bytes32[] proof)": 1,
    "leave(uint256 _amount, uint256 _date)": 14,
    "leave(uint256 _share)": 98,
    "limitLock(string _meshAddress, uint256 _lockedValue)": 3,
    "linearClaimPendingWithdraw(uint256 _poolId)": 1,
    "linearClaimReward(uint256 _poolId)": 1,
    "linearWithdraw(uint256 _poolId, uint128 _amount)": 1,
    "liquidate(address _owner, uint256 _pid, uint256 _amount)": 2,
    "liquidate(uint256 amountOfTokens)": 5,
    "liquidate(uint32 positionId)": 2,
    "liquidateETH(address nftAsset, uint256 nftTokenId)": 2,
    "liquidateOverdueLoan(uint256 _loanId)": 16,
    "liquidateOverdueLoan(uint32 _loanId)": 216,
    "lock(address _tokenAddress, bytes _targetProxyHash, bytes _toAddress, bytes _toAssetHash, bytes _feeAddress, uint256[] _values)": 1,
    "lock(address holder, uint256 _value)": 49,
    "lock(address investor, uint256 amount, uint256 neumarks)": 100,
    "lock(bytes _recipient, address _token, uint256 _amount)": 2,
    "lock(uint128 lockId,address tokenAddress,bytes32 recipient,bytes4 destination,uint256 amount)": 2,
    "lock(uint256 _expiration)": 12,
    "lock(uint256 _lockAmount, uint256 _unlockTime, uint256 _lockId, address _sellerAddress)": 6,
    "lock(uint256 amount_, uint256 lockedTill_)": 8,
    "lock(uint256 tokenId, address locker)": 3,
    "lock(uint256[] ids, uint256 numDaysToAdd)": 1,
    "lock(uint8 _targetChain, address _nativeToken, uint256 _amount, bytes _receiver)": 3,
    "lockAdditional(bytes32 kek_id, uint256 addl_liq)": 3,
    "lockAtomic(tuple swap)": 1,
    "lockDistribution(uint256 _time)": 2,
    "lockEth(uint256 amount, address recipient)": 9,
    "lockLonger(bytes32 kek_id, uint256 new_ending_ts)": 1,
    "lockSdveCrvToSdCrv(uint256 _amount)": 1,
    "lockToke(uint256 tokeAmount,uint256 numOfCycles)": 4,
    "lockToken(address ethToken, uint256 amount, string accountId)": 68,
    "lockToken(address ethTokenAddr, uint256 amount, address recipient)": 10,
    "lockToken(uint256 _amountLock, address _addressReceive)": 1,
    "lockWithApproval(uint256 amount)": 8,
    "makeAdoptionOfferToAddress(bytes5 catId, uint256 price, address to)": 2,
    "makeCoverBegin(address smartCAdd, bytes4 coverCurr, uint256[] coverDetails, uint16 coverPeriod, uint8 _v, bytes32 _r, bytes32 _s)": 2,
    "makeCoverUsingCA(address smartCAdd, bytes4 coverCurr, uint256[] coverDetails, uint16 coverPeriod, uint8 _v, bytes32 _r, bytes32 _s)": 5,
    "makeCoverUsingNXMTokens(uint256[] coverDetails, uint16 coverPeriod, bytes4 coverCurr, address smartCAdd, uint8 _v, bytes32 _r, bytes32 _s)": 3,
    "makeOffer(address client, uint256 quoteIndex, uint256 price)": 19,
    "makeOfferV2(address nftContract, uint256 tokenId, uint256 amount, address referrer)": 13,
    "makeRequestedWithdrawal(uint256 _depositId, uint256 _amount)": 1,
    "massHarvest()": 104,
    "matchAdvancedOrders(tuple[] ,tuple[] ,tuple[] ,address recipient)": 5,
    "matchAdvancedOrders(tuple[] advancedOrders,tuple[] criteriaResolvers,tuple[] fulfillments)": 4,
    "matchAskWithTakerBid(tuple takerBid,tuple makerAsk)": 68,
    "matchAskWithTakerBidUsingETHAndWETH(tuple takerBid,tuple makerAsk)": 60,
    "matchBidWithTakerAsk(tuple takerAsk,tuple makerBid)": 9,
    "matchOrders(tuple orderLeft,bytes signatureLeft,tuple orderRight,bytes signatureRight)": 6,
    "matchOrders(tuple[] orders, tuple[] fulfillments)": 1,
    "matchWithCoin(tuple apeOffer,tuple coinOffer)": 25,
    "megaSwap(tuple data)": 100,
    "meowSushi(address to, uint256 amount)": 1,
    "merkleMint(bytes32[] _merkleProof,uint256 numberOfTokens,uint256 maxMintsPerWallet,address recipient)": 5,
    "message(string _message)": 3,
    "metMint(uint256 amount, bool stake)": 3,
    "migrate()": 16,
    "migrate(address _tokenOwnerAddress, bytes32 _recipient, uint256 _amount)": 1,
    "migrate(address contractAddress, uint256 low, uint256 high)": 3,
    "migrate(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, uint256 deadline)": 1,
    "migrate(address[] assetsToMigrate,tuple[] positionsToRepay,tuple[] permits,tuple[] creditDelegationPermits)": 5,
    "migrate(string name)": 1,
    "migrate(uint256 _oldId, uint256 _newId, bytes32 _leaf, bytes32[] _merkleProof)": 1,
    "migrate(uint256 _value)": 9,
    "migrate(uint256 amount, uint256 maxMigrationLoss)": 7,
    "migrate(uint256 wxAmount, uint256 xAmount, uint256 v1Amount, address recipient, bool lock)": 9,
    "migrate(uint256[] _fromPids,uint256[] _toPids,uint256[] _amounts)": 8,
    "migrate(uint256[] amount, uint256[] expireBlocks, uint256 migrationStatus, bytes[] sigs)": 1,
    "migrateAll()": 2,
    "migrateAll(address token, address account)": 7,
    "migrateAll(uint8 _to)": 11,
    "migrateAuctionLP(uint256 amount,bytes signature)": 1,
    "migrateDelegation(uint256 fromValidatorId, uint256 toValidatorId, uint256 amount)": 6,
    "migrateDelegator(address delegator)": 1,
    "migrateEscrow(uint256[][] entryIDs)": 5,
    "migrateFromLegacyReputationToken()": 3,
    "migrateLockedStakes(uint256[] _stakeIds)": 7,
    "migrateMoos(uint256[] tokens)": 1,
    "migratePositions(tuple[] positionLists)": 23,
    "migrateToken()": 191,
    "migrateToken(uint256 amount)": 123,
    "migrateTokens(uint256 tokenId, uint256 amount)": 2,
    "migrateUser(address account, uint256[] pids)": 3,
    "migrateV1Tokens(uint256 v1VaultId)": 1,
    "migrateVaults(address startingYieldToken, address targetYieldToken, uint256 shares, uint256 minReturnShares, uint256 minReturnUnderlying)": 7,
    "mint()": 154,
    "mint(address _input, uint256 _inputQuantity, uint256 _minOutputQuantity, address _recipient)": 1,
    "mint(address _owner, uint256 _amount)": 35,
    "mint(address _target, uint256 _amount, bytes32 _nHash, bytes _sig)": 1,
    "mint(address _to)": 141,
    "mint(address _to, uint16 _num)": 3,
    "mint(address _to, uint16 quantity, bool freeMint)": 2,
    "mint(address _to, uint256 _amount, uint256 _priceUsd)": 3,
    "mint(address _to, uint256 _id, uint256 _quantity, bytes _data)": 1,
    "mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] merkleProof)": 4,
    "mint(address creatorContractAddress,uint256 claimIndex,uint32 mintIndex,bytes32[] merkleProof,address mintFor)": 25,
    "mint(address minter, uint256 amount, uint256 fee, uint256 nonce, bytes sig)": 1,
    "mint(address minter, uint256 seed, uint8 ctype, uint256 eliteId)": 1,
    "mint(address recipient, uint256 amount, bytes32[] merkleProof)": 7,
    "mint(address to, address tokenIn, uint256 maxAmount, uint256 amountIn, bytes32[] proof)": 1,
    "mint(address to, bytes32[] _soundData, uint256 _bpm)": 6,
    "mint(address to, uint16 set, uint8 number)": 4,
    "mint(address to, uint256[] _attributions)": 1,
    "mint(address[] _receivers, uint256[] _values)": 8,
    "mint(bytes _signature, uint256 _stage, uint256 _maxAtCurrentStage, uint32 _amount)": 6,
    "mint(bytes dj_ids, bytes seeds)": 3,
    "mint(bytes payload)": 3,
    "mint(bytes signature, uint256 nonce, uint256 numberOfTokens)": 3,
    "mint(bytes signature, uint256 randomSeed, uint256 nonce, uint256 amount)": 1,
    "mint(bytes signature,uint256 nonce,uint256 numberOfTokens,uint256 maxMintsPerWallet,address recipient)": 1,
    "mint(bytes signature_, bytes32 salt_, uint256[] tokenIds_, uint256[] quantities_, uint256[] evoTokenIds_)": 2,
    "mint(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig)": 4,
    "mint(bytes32[] _merkleProof, address _beneficiary)": 1,
    "mint(bytes32[] _merkleProof, uint256 _mintAmount)": 2,
    "mint(bytes32[] _ogProof, uint256 _ogQty, bytes32[] _nonOgProof, uint256 _nonOgQty)": 1,
    "mint(bytes32[] _proof)": 22,
    "mint(bytes32[] hashes, bytes signature, uint256 periodId)": 14,
    "mint(string _imageName, string _imageHash, string _imageId, uint256 _classId, uint256 _dispositionId, uint256[4] _seeds, bytes _signedMessage, bytes _whitelistMessage, uint256 _whitelistAllocation, bool _isHonorary)": 5,
    "mint(string _symbol, address _recipient, uint256 _amount, bytes32 _nHash, bytes _sig)": 4,
    "mint(string canvasId,string mintId,uint256 expire,string metadataUrl,bytes signature)": 2,
    "mint(string salt, bytes token, uint256 amount)": 4,
    "mint(tuple auth,uint256 _count)": 3,
    "mint(tuple auth,uint256 quantity,address affiliate,bytes signature)": 1,
    "mint(tuple meta,tuple coupon)": 1,
    "mint(tuple params)": 476,
    "mint(uint16 amount)": 2,
    "mint(uint256 _amount,address _underlying,uint256 _expiration,address _position,tuple[] _permitCallData)": 1,
    "mint(uint256 _amount,tuple _whitelist)": 2,
    "mint(uint256 _amountToMint, bytes _data)": 2,
    "mint(uint256 _amt,tuple _ticket)": 2,
    "mint(uint256 _collateral_amount, uint256 _share_amount, uint256 _dollar_out_min)": 9,
    "mint(uint256 _game_id, uint256 _type_id, uint256 _achievemint_id, bytes signature)": 1,
    "mint(uint256 _id, uint256 _quantity, bytes _data)": 5,
    "mint(uint256 _mintAmount, uint256[] ids)": 1,
    "mint(uint256 _tokenId, string _uri, uint256 _timestamp, bytes _signature)": 1,
    "mint(uint256 amount, address account)": 23,
    "mint(uint256 amount, uint256 index, uint256 maxAmount, bytes32[] merkleProof)": 1,
    "mint(uint256 amount, uint256 nonce, uint8 v, bytes32 r, bytes32 s)": 1,
    "mint(uint256 id, uint256 amount, bool unique, bytes data)": 2,
    "mint(uint256 inAmount, bytes32[] merkleProof)": 5,
    "mint(uint256 load, uint256 eth, address user)": 1,
    "mint(uint256 mintedAmount)": 392,
    "mint(uint256 nonce, bytes32 challenge_digest)": 3,
    "mint(uint256 pSaleId, address pAccount, uint256 pMintAmount, bytes32[] pProof)": 1,
    "mint(uint256 poolId, uint256 inAmount, bytes32[] merkleProof)": 1,
    "mint(uint256 stage, uint256 amount, uint256 maxAmount, uint256 index, bytes32[] merkleProof)": 1,
    "mint(uint256 tokenId, uint256 startingPrice)": 18,
    "mint(uint256 version, uint256 amount, uint256 buyAmount, uint256[4] pricesAndTimestamps, bytes signature)": 1,
    "mint(uint256[] __quantities, bytes32[][] __proofs, uint256[] __allotments, uint256[] __allowlistIds)": 5,
    "mint(uint256[] _amounts, uint256 _minMintAmount)": 2,
    "mint(uint256[] _cs)": 27,
    "mint(uint256[] _poolType, uint256[] _amount, bool[] _useUnicorns, address[] _rainbowPools, address[] _unicornPools, bytes sig, uint256 maxMints)": 1,
    "mint(uint256[] _tokenIds, address[] _owners)": 3,
    "mint(uint256[] inputIndexes_, bytes32[] proof_)": 4,
    "mint(uint256[] proofTokenIds, uint8[] grailIds)": 12,
    "mint(uint256[] tokenIds, uint256[] amounts)": 2,
    "mint(uint32 qty,bytes32[] proof,uint64 timestamp,bytes signature)": 1,
    "mint(uint8 _sourceChain,bytes _nativeToken,bytes _transactionId,uint256 _amount,address _receiver,bytes[] _signatures,tuple _tokenParams)": 1,
    "mint(uint8 editionId)": 7,
    "mint0xCube(uint256 numberOfTokens)": 1,
    "mint1(uint256 _mintAmount, bytes _signature)": 1,
    "mint5()": 1,
    "mintAllowList(address nftContract,address feeRecipient,address minterIfNotPayer,uint256 quantity,tuple mintParams,bytes32[] proof)": 8,
    "mintAllowList(uint256 numSets,uint256 mintPrice,uint256 maxForWallet,uint256 startTime,bytes32[] proof)": 1,
    "mintAllowList(uint256 numberOfTokens, bytes32[] merkleProof)": 3,
    "mintAllowlist(address _minter, bytes _voucher)": 1,
    "mintAllowlist(address to, bytes32[] seeds, uint256[] variants, bytes32[][] allowlistProofs)": 1,
    "mintAllowlist(bytes32[] merkleProof, uint256 amount)": 1,
    "mintAllowlist(uint16 _quantity, uint8 v, bytes32 r, bytes32 s)": 2,
    "mintAllowlist(uint8 _quantity,bytes32[] _proof)": 1,
    "mintAllowlistedDecagon(bytes32[] _merkleProof)": 2,
    "mintAndApprove(address to, uint256 tokenType, uint256[] txHashes, address[] operators)": 53,
    "mintAndStake(address _feeder, address _vault, address _input, uint256 _inputQuantity, uint256 _minOutputQuantity)": 3,
    "mintAvatar(bytes signature, uint256 signatureExpiration, uint256 price, uint256 desiredConfiguration)": 1,
    "mintBaoGWithSignature(bytes32[] _proof)": 3,
    "mintBasedHeads(bytes signature,tuple mintKey)": 1,
    "mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] mintIndices, bytes32[][] merkleProofs)": 2,
    "mintBatch(address creatorContractAddress,uint256 claimIndex,uint16 mintCount,uint32[] mintIndices,bytes32[][] merkleProofs,address mintFor)": 39,
    "mintBatch(uint256 _numberOfBuildings)": 1,
    "mintBatch(uint64[] quantities,bytes32[][] proofs,uint256[] phaseIndices,uint64 publicQuantity)": 1,
    "mintBorrow(address apeTokenMint, uint256 mintAmount, address apeTokenBorrow, uint256 borrowAmount)": 1,
    "mintCapsuleWhitelist(bytes32 hash, bytes signature, uint256 tokenId, uint256 numberOfTokens)": 1,
    "mintChallenger(uint256 quantity)": 2,
    "mintCollectibles(uint256 _count)": 3,
    "mintCommunity(uint256 amount, bytes sig)": 3,
    "mintCreature(uint256[] _ids)": 5,
    "mintDripDrop(uint256 _numToMint, uint256 _maxFreeMint, uint256 _maxMint, bytes _sig)": 1,
    "mintEarlyAccess(address to, uint16 num, uint16 numMax, uint128 nonce, bytes signature)": 2,
    "mintEditions(address[] recipients)": 1,
    "mintFPI(uint256 frax_in, uint256 min_fpi_out)": 7,
    "mintFRAME(uint256 tokenId)": 1,
    "mintForGenesisDropHoldersOnly(address recipient, uint256 _projectId, uint256 _project1TokenId, uint256 _project2TokenId, uint256 _project3TokenId)": 9,
    "mintForGenesisDropHoldersOnly(address recipient,uint256 _projectId,uint256 _project1TokenId,uint256 _project2TokenId,uint256 _project3TokenId,address _vault)": 1,
    "mintForInvisibleFriends(uint256[] originalIds)": 1,
    "mintForUser(address user)": 1,
    "mintFounders(uint256[3] limits, bytes32[] proof)": 1,
    "mintFree(uint256 _nbTokens)": 1,
    "mintFreeguysWL(string id)": 2,
    "mintFriends(bytes32[] merkleProof)": 1,
    "mintFromDopeTo(uint256 id,address to,tuple meta,bytes data,uint32 gasLimit)": 5,
    "mintFromETH(address to,uint256 n)": 7,
    "mintFromETH(uint256 noteAmount, uint256 minBPT)": 4,
    "mintFromEnableList(address recipient)": 1,
    "mintFromFixedPriceSale(address nftContract, uint16 count, address buyReferrer)": 3,
    "mintFromMul(uint256[] tokenIds, uint256[] editionToBurn)": 1,
    "mintFromShadowBatch(uint256[] _tokenID, uint256[] _nftAmountForMint, uint256 _nonce, bytes32 _msgForSign, bytes _signature)": 1,
    "mintFromWETH(uint256 noteAmount, uint256 wethAmount, uint256 minBPT)": 1,
    "mintGLICPIXV2_BATCH(uint8 _collection, uint256[] tokenIds)": 1,
    "mintGenesisExplorer(uint256 _tokenId, uint256[3] _leTokenIds)": 4,
    "mintGods(uint256 _numGodsToMint)": 5,
    "mintHedgie(uint256 tier, bytes32[] merkleProof)": 3,
    "mintHoodie(bytes signatureFromChip,uint256 blockNumberUsedInSig)": 1,
    "mintIdleToken(uint256 _amount, bool, address _referral)": 2,
    "mintInfinity(uint256 _numberOfTokens)": 1,
    "mintItem(address to, uint256 itemId)": 1,
    "mintItem(uint256 itemId, uint256 amount)": 1,
    "mintItemNoDiscount(tuple[] mintInfos)": 2,
    "mintLands(uint256 numLands, bytes32[] merkleProof)": 3,
    "mintLimited(uint256[3] limits, bytes32[] proof)": 1,
    "mintListed(string list,uint256 amount,bytes32[] merkleProof,uint256 maxAmount)": 1,
    "mintListed(uint256 amount, bytes32[] merkleProof, uint256 maxAmount)": 2,
    "mintLocked()": 1,
    "mintMany(address[] gauge_addrs)": 51,
    "mintMiladys(uint256 numberOfTokens)": 1,
    "mintMilkListSale(uint8 numberOfTokens, bytes32[] merkleProof)": 1,
    "mintMultiAndStake(address _feeder, address _vault, address[] _inputs, uint256[] _inputQuantities, uint256 _minOutputQuantity)": 1,
    "mintMultiple(uint256 num)": 1,
    "mintMushrooms(uint256 _mushrooms)": 1,
    "mintNFT(address _toTeamAddress,uint64 _teamCount,address _toKeySupporterAddress,uint64 _keySupporterCount,address _toPublicWhiteListAddress,uint64 _publicWhiteListCount,uint64 _count)": 1,
    "mintNFT(bytes32[] _merkleproof)": 3,
    "mintNFT(uint256 numberOfNfts)": 2,
    "mintNFT(uint32 _type)": 1,
    "mintNFTWhitelist(uint256 amount, bytes32 signatureR, bytes32 signatureVS, bool stake)": 1,
    "mintNSignal(address _graphAccount, uint256 _subgraphNumber, uint256 _tokensIn, uint256 _nSignalOutMin)": 2,
    "mintNative(uint256 stakeIndex, uint40 stakeId)": 13,
    "mintOHM(bytes32[] merkleProof, uint256 amountTokens, uint256 amountOhm)": 1,
    "mintOrBurn(tuple params)": 2,
    "mintPROOF(uint256[] proofTokenIds)": 3,
    "mintPack(uint256 cID, uint256 mintPassTokenId)": 1,
    "mintPaid(uint256 _quantity)": 1,
    "mintPass(bytes32 signatureR, bytes32 signatureVS)": 1,
    "mintPassMint(uint256 _quantity, uint256 _totalMintPasses, bytes _signature)": 1,
    "mintPassMint(uint256 id)": 1,
    "mintPassesVerified(tuple _payload,bytes _signature)": 1,
    "mintPoly(uint256 amount,uint256 bid_budget_percent)": 1,
    "mintPreSaleFreeAllowlist(bytes32[] proof,int256 quantity)": 2,
    "mintPremium(uint256 count)": 3,
    "mintPremiumWhitelist(uint256 count, bytes signature)": 1,
    "mintPresale()": 3,
    "mintPresale(uint16 amount, uint256 timestamp, bytes sig)": 1,
    "mintPresale(uint256 amount)": 2,
    "mintPresale(uint256 numToMint, uint256 maxMints, uint256 voucherAmount, bytes32[] merkleProof)": 1,
    "mintPresale(uint256[] bagIds, uint16[] bagType, uint8[] traits, bytes32[] merkleProof)": 6,
    "mintPresaleOGRex(string popToken, bytes key, uint256 amountOfOGRex)": 1,
    "mintPrivate(int16 x, int16 y)": 1,
    "mintPrivate(uint256 quantity, uint256 allowedQuantity, bytes32[] proof)": 1,
    "mintProducerPass(uint256 episodeID, uint256 amount)": 1,
    "mintPublic(address nftContract, address feeRecipient, address minter, uint256 quantity)": 6,
    "mintPublic(address to, bytes32 nonce, bytes sig)": 1,
    "mintPublic(bytes32[] _merkleProof)": 1,
    "mintPublic(uint256 _mintAmount, bytes _signature)": 1,
    "mintPublic(uint256 amount)": 3,
    "mintPublic(uint64 quantity)": 1,
    "mintPublicSale(uint256 tokensCount)": 5,
    "mintPyFromSy(address receiver,address YT,uint256 netSyIn,uint256 minPyOut)": 2,
    "mintPyFromToken(address receiver,address YT,uint256 minPyOut,tuple input)": 19,
    "mintPyxis(tuple coupon)": 1,
    "mintRandomPrimes(uint256 _count, uint256 _batch0Cap, uint256 _batch1Cap, bytes32[] _merkleProof)": 1,
    "mintStageOne(bytes32[] proof, bytes data)": 1,
    "mintStandard(uint256 count)": 1,
    "mintStandardWhitelist(uint256 count, bytes signature)": 1,
    "mintTEAM(uint256 amount)": 1,
    "mintTo(address _to)": 10,
    "mintTo(address _to, uint256 _compositionPrice, uint256 _imageHash)": 1,
    "mintToken(uint256 amount, bytes32[] proof)": 1,
    "mintToken(uint256 issueId, uint256 systemProductID)": 1,
    "mintToken(uint256 mintedAmount)": 3,
    "mintTokenOnPreSale(uint256 numberToken)": 1,
    "mintTreats(uint256[] tokenIds,uint256[] boxIds,bytes signature)": 7,
    "mintTricksAndBoxes(address[] partnerContracts,uint256[] partnerTokenIds,bool[] isBox,uint256[] tokenIds,bytes signature)": 10,
    "mintUltimate(bytes sig)": 1,
    "mintUsingAttestation(bytes attestation)": 1,
    "mintV1YieldMultiple(uint256[] _stakeIds)": 44,
    "mintVault()": 1,
    "mintWhitelist(bytes signature)": 1,
    "mintWhitelist(bytes signature, uint256 quantity)": 1,
    "mintWhitelist(bytes32[] proof)": 1,
    "mintWhitelist(uint256 _count)": 1,
    "mintWhitelist(uint64 quantity, uint64 allowance, bytes32[] merkleProof, uint8 state_)": 1,
    "mintWhitelistAmountAndPrice(bytes32 hash,bytes signature,uint256 numberOfTokens,uint256 customLimit,uint256 price)": 1,
    "mintWhitelistPrice(bytes32 hash, bytes signature, uint256 price, uint256 numberOfTokens)": 1,
    "mintWhitelisted(bytes32[] merkleProof)": 1,
    "mintWithCaladita(uint256[] tokenIds)": 1,
    "mintWithOldKnc(uint256 amount)": 7,
    "mintWithPass(uint256 _catId, uint256 _maxMint, bool _hasCat, bytes _signature)": 1,
    "mintWithProof(bytes32[] merkleProof)": 1,
    "mintWithSign(address signer, address to, uint256 tokenId, uint256 deadline, uint256 nonce, bytes signature)": 1,
    "mintWithSignature(tuple _req,bytes _signature)": 2,
    "mintWithSignature(uint256 n, uint256 price, bytes32 nonce, bytes signature)": 1,
    "mintWithwhitelisted(address _to, uint256 _mintAmount)": 3,
    "mint_ONLY_if_you_TRUST_the_process(uint256 count)": 11,
    "mint_many(address[8] gauge_addrs)": 3,
    "mitosis(uint256 tokenID,bytes32 messageHash,bytes signature)": 22,
    "mixSwap(address fromToken, address toToken, uint256 fromTokenAmount, uint256 minReturnAmount, address[] mixAdapters, address[] mixPairs, address[] assetTo, uint256 directions, bytes[] moreInfos, uint256 deadLine)": 29,
    "mixer(tuple[] paramsPermit,tuple[] paramsTransfer,tuple[] paramsSwap,uint8[] actions,bytes[] datas)": 2,
    "modify_lock(uint256 amount, uint256 unlock_time, address user)": 1,
    "move(uint256 _summoner, int256 _x, int256 _y)": 12,
    "multiAssetSwap(tuple erc20Details,tuple[] erc721Details,tuple[] erc1155Details,tuple[] converstionDetails,tuple[] tradeDetails,address[] dustTokens,uint256[2] feeDetails)": 71,
    "multiClaim(address account, address[] pools, bool[] isCall)": 2,
    "multiClaim(bool vest, uint256[] pids)": 1,
    "multiClaim(uint256 claimAmount, uint256[] indexes, uint256[] maximumAmounts, bytes32[][] merkleProofs)": 11,
    "multiJoinArena(uint256[] tokenIds)": 1,
    "multiMint(uint32 count,address to)": 1,
    "multiMintWithMintPass(uint256[] mintPassIds_)": 1,
    "multiRedeem(tuple[] leafInfos,bytes32[][] proofs,bytes32[] merkleRoots)": 3,
    "multiSend(bytes transactions)": 21,
    "multiSendETH(address[] _addresses, uint256[] _amounts)": 1,
    "multiSwap(tuple data)": 149,
    "multiWithdraw(uint64[] vestIDList)": 8,
    "multicall(bytes[] data)": 1819,
    "multicall(bytes[] data, bool revertOnFail)": 112,
    "multicall(tuple[] calls)": 10,
    "multicall(uint256 deadline, bytes[] data)": 8075,
    "multihopBatchSwapExactIn(tuple[][] swapSequences,address tokenIn,address tokenOut,uint256 totalAmountIn,uint256 minTotalAmountOut)": 1,
    "multiplexBatchSellEthForToken(address outputToken,tuple[] calls,uint256 minBuyAmount)": 198,
    "multiplexBatchSellTokenForEth(address inputToken,tuple[] calls,uint256 sellAmount,uint256 minBuyAmount)": 166,
    "multiplexBatchSellTokenForToken(address inputToken,address outputToken,tuple[] calls,uint256 sellAmount,uint256 minBuyAmount)": 300,
    "multiplexMultiHopSellEthForToken(address[] tokens,tuple[] calls,uint256 minBuyAmount)": 10,
    "multiplexMultiHopSellTokenForEth(address[] tokens,tuple[] calls,uint256 sellAmount,uint256 minBuyAmount)": 12,
    "multiplexMultiHopSellTokenForToken(address[] tokens,tuple[] calls,uint256 sellAmount,uint256 minBuyAmount)": 259,
    "multisendETH(address[] receivers, uint256[] values)": 3,
    "multisendToken(address token,tuple[] recipients,uint256 total,address referral)": 1,
    "mutateApeWithSerum(uint256 serumTypeId, uint256 apeId)": 7,
    "nTokenClaimIncentives()": 36,
    "nameLostMana(uint256 tokenId,tuple[] itemsToName)": 3,
    "nftOwnerClaimLand(uint256[] alphaTokenIds, uint256[] betaTokenIds)": 19,
    "notifyDeposit()": 2,
    "offer(address _originContract, uint256 _tokenId, address _currencyAddress, uint256 _amount, bool _convertible)": 4,
    "offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei)": 44,
    "offerPunkForSaleToAddress(uint256 punkIndex, uint256 minSalePriceInWei, address toAddress)": 1,
    "ohfukwatsHAPNIN(uint256 ORDURRnumbr, uint256[] stuffs)": 1,
    "onboard(address dao, address kycedMember, address tokenAddr, uint256 amount, uint256 memberNonce, bytes signature)": 1,
    "onboard(address dao, address kycedMember, bytes signature)": 4,
    "onboardEth(address dao, address kycedMember, uint256 memberNonce, bytes signature)": 3,
    "openBox(tuple hash,bytes signature,uint256 boxTokenId)": 30,
    "openCreditAccountMulticall(uint256 borrowedAmount,address onBehalfOf,tuple[] calls,uint16 referralCode)": 3,
    "openEgg(uint256 eggId, bool isClaimCreature)": 2,
    "openShort(uint256 _vaultId,uint256 _powerPerpAmount,uint256 _uniNftId,tuple _exactInputParams)": 3,
    "openTrove(uint256 _maxFeePercentage, uint256 _LUSDAmount, address _upperHint, address _lowerHint)": 6,
    "operate(tuple[] _actions)": 1,
    "operate(uint256[] _actions, bytes[] _data)": 46,
    "optimalSwap(bytes _msgData, address _feeToken, uint256 _fee)": 2,
    "optimizedBuyAssetsForEth(bytes optimizedBuys)": 33,
    "oracleSellDHPT(address poolAddress, address stableCoin, uint256 dhptAmount, uint256 blockNumber, uint256 poolPrice, bytes signature)": 2,
    "order(uint256 id, uint256 amount, uint256 index, uint256 price, uint256 start, bool limited, bytes32 root, bytes32[] proof)": 2,
    "originSwap(address _origin, address _target, uint256 _originAmount, uint256 _minTargetAmount, uint256 _deadline)": 1,
    "originSwap(address _quoteCurrency, address _origin, address _target, uint256 _originAmount, uint256 _minTargetAmount, uint256 _deadline)": 2,
    "outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data)": 139,
    "outboundTransferTo(tuple _userRequest)": 11,
    "ownerWithdrawErc20(address token, uint256 amount)": 11,
    "ownerWithdrawEth(uint256 amount)": 1,
    "parcelPassMint()": 2,
    "pay(uint16 _packCount, uint256 _dbPaymentId, bytes _signature)": 11,
    "pay(uint256 _invoiceId)": 2,
    "pay(uint256 _projectId, address _beneficiary, string _memo, bool _preferUnstakedTickets)": 7,
    "pay(uint256 _projectId, uint256 _amount, address, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string _memo, bytes _metadata)": 3,
    "pay(uint256 value,uint256 gasPrice,uint256 expiration,bytes32 payload,bytes32 hash,uint8 v,bytes32 r,bytes32 s,address tokenContract)": 87,
    "payAll(uint256 nodeCount)": 2,
    "payAndMint(uint256 tokenId,tuple[] tokenData,tuple verification)": 3,
    "payBackLoan(uint32 _loanId)": 3,
    "payETH(bytes32 paymentId, uint256 expiration, uint256 tokAmt, address depositAddress, bytes signature)": 1,
    "payFee(uint128 nodeId)": 8,
    "payFee(uint256 _id)": 1,
    "payoutERC20Batch(address[] tokens, address[] recipients, uint256[] amounts)": 1,
    "performDirectAction(address fromToken, address toToken, address receiver, uint256 amount, bytes swapExtraData)": 1,
    "permitAndStake(address owner, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s, bytes4 stakeType, bytes data)": 2,
    "phase1Mint(bytes signature_, bytes32 salt_, uint256 jungle_, uint256[] jfgIds_)": 1,
    "pixelMintingSale(bytes32[] _merkleProof)": 1,
    "placeBid(uint256 _tokenId, uint256 _amount, uint256 _price)": 17,
    "placeBid(uint256 index)": 44,
    "placeBidOnReserveAuction(uint256 _editionId)": 1,
    "placeBidV2(uint256 auctionId, uint256 amount, address referrer)": 9,
    "placeRequest(uint256 amount)": 1,
    "placeSellOrders(uint256 auctionId, uint96[] _minBuyAmounts, uint96[] _sellAmounts, bytes32[] _prevSellOrders, bytes allowListCallData)": 3,
    "plant()": 1,
    "pledge()": 3,
    "pledge(bytes32 _tunnelKey, uint256 _amount)": 1,
    "pledgeHEX(uint256 amount)": 2,
    "pokeBoost(address _account)": 5,
    "preMint(uint256 amount)": 1,
    "preSaleMint(bytes signature)": 1,
    "preSaleMint(uint256 quantity, bytes32[] proof)": 1,
    "preSaleMint(uint256 quantity, uint256 maxMint, bytes signature)": 2,
    "preSalesMint(uint16 _count, bool _isOG, uint256 _signatureId, bytes _signature)": 1,
    "premint(tuple config,uint256 amount)": 1,
    "preorderArtwork(uint256 tokenId, uint256 numberOfEditionsToBuy)": 1,
    "prepare(tuple args)": 3,
    "presale(uint256 _count, bytes32[] _merkleProof)": 5,
    "presale(uint256 numPieces, bytes32 r, bytes32 s, uint8 v)": 1,
    "presaleMint(uint256 amount, bytes32[] proof)": 2,
    "presaleMint(uint256 amount, string salt, bytes token)": 1,
    "presaleMint(uint256 count, uint256 maxAllowed, bytes32[] proof)": 1,
    "presaleMint(uint256 numberOfHippos)": 8,
    "presaleMint(uint256 qty,uint256 nonce,address addr,bytes signature)": 2,
    "presaleMint(uint256 quantity, uint256[] allowlistMintIds, uint256[] dawnKeyMintIds, bytes signature)": 1,
    "presaleMint(uint256[] ids)": 1,
    "presaleMint(uint64 quantity, uint256 allowed, bytes32[] proof)": 1,
    "presalePurchase(uint256 _maxMintable, uint256 _maxClaimable, uint256 _numMinting, uint256 _numClaiming, bytes signature)": 1,
    "privateClaim(string salt, bytes token)": 1,
    "privateMint(uint256 quantity, uint256 whiteQuantity, bytes32[] merkleProof)": 3,
    "processExits(address _token)": 5,
    "processExpiredLocks(bool _relock)": 133,
    "processRewards(bool isSell)": 21,
    "processRoute(address tokenIn,uint256 amountIn,address tokenOut,uint256 amountOutMin,address to,bytes route)": 1,
    "processTokenTransferInstruction(bytes encodedIncomingTokenTransferInfo, bytes encodedTokenTransfer)": 1,
    "profitsPayment(uint256 _assetId)": 2,
    "proportionalWithdraw(uint256 _componentsToBurn, uint256 _deadline)": 2,
    "propose(address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, string description)": 2,
    "proposePrice(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice)": 1,
    "proposeUnstake(uint256 _amount, address _token)": 1,
    "proveAndProcess(bytes _message, bytes32[32] _proof, uint256 _index)": 13,
    "provide(uint256 value)": 3,
    "provideInventory721(uint256 vaultId, uint256[] tokenIds)": 1,
    "provideLiquidityAndDeposit(address _staker, uint256[] _maxAmountsIn, bool _earn, uint256 _minAmount)": 1,
    "provideToSP(uint256 _amount, address _frontEndTag)": 20,
    "provideWithPermit(uint256 currencyAmount,address referral,uint256 deadline,uint8 v,bytes32 r,bytes32 s)": 2,
    "proxiedSwap(bytes _msgData, address _feeToken, address _inputToken, uint256 _inputAmount, address _outputToken, uint256 _fee)": 69,
    "proxyAssert(address dest, uint8 howToCall, bytes calldata)": 122,
    "proxyDeposit(address asset, address recipient, uint128 amount)": 1,
    "publicBuyKey()": 1,
    "publicExecuteBid(uint256 amount)": 11,
    "publicMint()": 15,
    "publicMint(bytes signature)": 1,
    "publicMint(string salt, bytes token, uint16 amount)": 1,
    "publicMint(uint256 _mintAmount)": 24,
    "publicMint(uint256 level, address contractAddress)": 1,
    "publicRandomMint(bytes signature_, bytes32 salt_, uint8 quantity_)": 2,
    "publicSale(uint256 count)": 1,
    "publicSaleMint()": 1,
    "publicSalesMint(uint16 _count)": 1,
    "publicSummon(uint256 numWarriors)": 1,
    "publishNewSubgraph(address _graphAccount, bytes32 _subgraphDeploymentID, bytes32 _versionMetadata, bytes32 _subgraphMetadata)": 1,
    "publishNewVersion(address _graphAccount, uint256 _subgraphNumber, bytes32 _subgraphDeploymentID, bytes32 _versionMetadata)": 3,
    "punkNoLongerForSale(uint256 punkIndex)": 4,
    "purchase()": 1,
    "purchase(address beneficiary)": 5,
    "purchase(address referrer,uint40 listingId,bytes data)": 1,
    "purchase(bytes32[] _proof, uint256 _allowedAmount, bool _onWaitlist, uint256 _numTokens)": 3,
    "purchase(uint16 amount, bytes32 message, bytes signature, string nonce)": 3,
    "purchase(uint256 _price)": 84,
    "purchase(uint256 _value, address _recipient, address _referrer, address _keyManager, bytes _data)": 1,
    "purchase(uint256 _value, address _recipient, address _referrer, bytes _data)": 2,
    "purchase(uint256 numberOfTokens, bytes32[] proof)": 18,
    "purchase(uint256 stage, uint256 amount, uint256 index, uint256 maxAmount, bytes32[] merkleProof)": 4,
    "purchase(uint256[] sizes, bool isPOW)": 1,
    "purchaseAllowList(uint256 numberOfTokens, bytes32[] _merkleProof)": 1,
    "purchaseBadgeWhiteList()": 1,
    "purchaseBlueprints(uint256 blueprintID, uint32 quantity, uint256 tokenAmount, bytes32[] proof)": 5,
    "purchaseBuff()": 10,
    "purchaseBuffs(uint256 quantity)": 6,
    "purchaseDomains(uint256 count,uint256 index,uint256 purchaseLimit,bytes32[] merkleProof)": 1,
    "purchaseNft()": 1,
    "purchasePresale(uint256 quantity, uint256 maxQuantity, uint256 pricePerToken, bytes32[] merkleProof)": 1,
    "purchasePresale(uint256[] tokens, bytes signature)": 1,
    "purchaseTo(address _to, uint256 _projectId, bytes32[] _proof)": 18,
    "purchaseToken(uint256 amount)": 3,
    "purchaseTokenPresale(uint256 _tier, uint256 _qty, uint256 _nonce, bytes _signature)": 1,
    "purchaseTokens(uint256 purchaseAmount, uint256 snapshotAmount, bytes32[] proof)": 1,
    "purchaseWLVendingItem(address contract_, uint256 index_)": 1,
    "purchaseWithEther(uint64 amount)": 2,
    "purchaserClaim()": 3,
    "putApesToAgency(uint256[] ids)": 1,
    "queue(uint256 proposalId)": 1,
    "raffleMint(uint256 _amount)": 1,
    "ragequit(uint256 sharesToBurn, uint256 lootToBurn)": 3,
    "ragequitAll()": 1,
    "reVote(uint256 _gasTarget, uint256 _eglAmount, uint8 _lockupDuration)": 2,
    "rebase()": 1,
    "receiveByEthereumAssetAddress(address tokenAddress, uint256 amount, address to, address from, bytes32 txHash, uint8[] v, bytes32[] r, bytes32[] s)": 1,
    "reclaim(uint256 id, address owner)": 5,
    "recordAllocation(uint16[16] choices)": 4,
    "redeem()": 1,
    "redeem(address _output, uint256 _fpTokenQuantity, uint256 _minOutputQuantity, address _recipient)": 27,
    "redeem(address _recipient, bool _stake)": 2,
    "redeem(address _setToken, uint256 _quantity, address _to)": 5,
    "redeem(address _to, uint256 _tokenId, bytes32[] _proof)": 2,
    "redeem(address _user, uint256 _epoch, uint256 _couponAmount)": 3,
    "redeem(address _user, uint256[] _indexes, bool _sendgABI)": 4,
    "redeem(address genArtCoreAddress, address singleRedemptionAddress, uint256 tokenId, uint256 variationId)": 2,
    "redeem(address poolToken, uint256 tokens, address to, uint256 deadline, bytes permitData)": 3,
    "redeem(address to, uint256 chainId, address token, uint256 amount)": 3,
    "redeem(address token, uint256 value)": 63,
    "redeem(address)": 3,
    "redeem(bytes32 _tunnelKey, uint256 _amount)": 1,
    "redeem(bytes32[] _proof, uint256 _amount)": 1,
    "redeem(tuple args,address user)": 15,
    "redeem(tuple permit_,address recipient_,bytes signature_)": 2,
    "redeem(uint256 _id, uint256 _loss, bytes32[] _merkleProof)": 3,
    "redeem(uint256 _round, uint256[][] _tokenIds)": 23,
    "redeem(uint256 eventId_, uint256 index_, address recipient_, uint256 receivingAmount_, uint256 sendingAmount_, bytes32[] proofs)": 17,
    "redeem(uint256 ilavaAmount, bool all)": 2,
    "redeem(uint256 index, address recipient, uint256 amount, bytes32[] merkleProof)": 1,
    "redeem(uint256 longTokenQty, uint256 shortTokenQty, address collateralCoinAddress)": 8,
    "redeem(uint256 sNOTEAmount, uint256 minWETH, uint256 minNOTE, bool redeemWETH)": 2,
    "redeem(uint256 shares, address receiver, address owner)": 6,
    "redeem(uint256 tokens)": 290,
    "redeem(uint256[] amounts)": 2,
    "redeem(uint256[] mpIndexes, uint256[] amounts)": 8,
    "redeem(uint8[] productVariants,uint256[] amounts)": 1,
    "redeemAfterExpiry(bytes32 _forgeId, address _underlyingAsset, uint256 _expiry)": 3,
    "redeemAll()": 2,
    "redeemAll(address[] synthProxies)": 1,
    "redeemAndUnwrap(uint256 _amount, bool _isCreditAmt, uint256 _minAmountOut, address _output, address _beneficiary, address _router, bool _isBassetOut)": 5,
    "redeemAtomic(tuple order,bytes secret)": 4,
    "redeemBatch(address owner, address initialCollection, uint256[] cloneXIds, uint256[] wearableIds, uint256[] amount)": 15,
    "redeemBatch(address owner, address initialCollection, uint256[] tokenIds)": 4,
    "redeemBond(uint256 bondId_)": 1,
    "redeemCardForOther(uint256 cardIdToRedeem, uint256 amount)": 7,
    "redeemCoupon(address dao, address authorizedMember, uint256 amount, uint256 nonce, bytes signature)": 14,
    "redeemCredits(uint256 _credits)": 19,
    "redeemDueInterestAndRewards(address user,address[] sys,address[] yts,address[] markets)": 37,
    "redeemElementals(bytes signature,uint256[] tokenIds)": 1,
    "redeemExactBassets(address[] _outputs, uint256[] _outputQuantities, uint256 _maxInputQuantity, address _recipient)": 3,
    "redeemExactSetForETH(address _setToken, uint256 _amountSetToken, uint256 _minEthReceive, bytes[] _componentQuotes, address _issuanceModule, bool _isDebtIssuance)": 1,
    "redeemFees(address _account,uint256 _amount,bytes32[] _proof)": 1,
    "redeemFries()": 1,
    "redeemIdleToken(uint256 _amount)": 8,
    "redeemJacketToken(uint256 numTokens)": 7,
    "redeemLocal(uint16 _dstChainId,uint256 _srcPoolId,uint256 _dstPoolId,address _refundAddress,uint256 _amountLP,bytes _to,tuple _lzTxParams)": 31,
    "redeemMany(uint256[] _ids)": 1,
    "redeemMature(address tranche, uint256 amount)": 7,
    "redeemNFT(uint256 _id)": 1,
    "redeemPasses(uint256[] passIds, uint8[] grailIds)": 5,
    "redeemPotionsBatch(uint256[] claimIds)": 3,
    "redeemPreorder(uint256 tokenId, uint256 numberOfEditions)": 1,
    "redeemPyToSy(address receiver,address YT,uint256 netPyIn,uint256 minSyOut)": 3,
    "redeemPyToToken(address receiver,address YT,uint256 netPyIn,tuple output)": 3,
    "redeemRewards(uint256 perc)": 1,
    "redeemSeniorUnderlying()": 2,
    "redeemShares()": 22,
    "redeemSharesInKind(address _recipient, uint256 _sharesQuantity, address[] _additionalAssets, address[] _assetsToSkip)": 3,
    "redeemSyToToken(address receiver,address SY,uint256 netSyIn,tuple output)": 15,
    "redeemToken(address _tokenAddress, address _userAddress, uint256 _amount)": 21,
    "redeemUnderlying(bytes32 _forgeId, address _underlyingAsset, uint256 _expiry, uint256 _amountToRedeem)": 3,
    "redeemUnderlying(uint256 redeemAmount)": 307,
    "redelegateDelegatorFee(address validator)": 3,
    "refer(address ref_add)": 1,
    "referralShareVote(uint256 vote)": 1,
    "refund()": 1,
    "refund(address recipient)": 8,
    "refund(bytes signature,uint256 wonItemsCount)": 1,
    "refund(uint256 _amount, bytes sig)": 1,
    "refundAtomic(bytes32 secretHash)": 1,
    "register()": 1,
    "register(address _darknodeID, bytes _publicKey)": 10,
    "register(string hash)": 13,
    "register(string name, address directAddress)": 54,
    "register(tuple _account)": 2,
    "register(uint256 pricePerVote, uint16 minPerc, uint16 maxPerc)": 1,
    "registerAndDeposit(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId)": 3,
    "registerAndMintForWhitelist(bytes32 hash, bytes signature, uint256 numberOfTokens, uint256 customLimit)": 4,
    "registerAndWithdraw(address ethKey, uint256 starkKey, bytes signature, uint256 assetType)": 1,
    "registerDepositETH(address _shareRecipient)": 1,
    "registerIDO()": 5,
    "registerNode(string _timezoneLocation)": 1,
    "registerProxy()": 18,
    "registerUser(address ethKey, uint256 starkKey, bytes signature)": 2,
    "registerWithConfig(string name, address owner, bytes32 secret, address resolver, address addr)": 1,
    "registerWithConfig(string name, address owner, uint256 duration, bytes32 secret, address resolver, address addr)": 108,
    "registerWithdraw(uint256 _shares)": 1,
    "reinvest(uint256 amount)": 10,
    "relayMessage(address _target,address _sender,bytes _message,uint256 _messageNonce,tuple _proof)": 39,
    "relayTokens(address token, address _receiver, uint256 _value)": 30,
    "relayTokens(address token, uint256 _value)": 1494,
    "release()": 58,
    "release(address _creator, uint256 _id)": 2,
    "release(address token)": 2356,
    "release(address token, address to, uint256 amount, uint256 nonce, bytes signature)": 13,
    "release(bytes32 vestingScheduleId, uint128 amount)": 3,
    "release(bytes32 vestingScheduleId, uint256 amount)": 2,
    "release(uint256 amount)": 3,
    "releaseLock(uint8 _lock)": 1,
    "releaseMultiple(address _beneficiary, uint256[] _ids)": 8,
    "releaseParticle(address receiver, address contractAddress, uint256 tokenId, string walletManagerId, address assetToken)": 1,
    "releaseToken()": 19,
    "releaseTokens(bytes signature, address token, uint256 amount, uint256 nonce)": 5,
    "releaseVesting()": 23,
    "relock(uint256 tokenId_, uint256 lockAmount_, uint256 duration_, uint256 bonusMultiplier_, address destination_)": 5,
    "removeCollateral(uint256 share, address to)": 6,
    "removeGoo(uint256 gooAmount)": 1,
    "removeLiquidity(address l1Token, uint256 lpTokenAmount, bool sendEth)": 16,
    "removeLiquidity(address pool, uint256 burnAmount, uint256 amount0Min, uint256 amount1Min, address receiver)": 6,
    "removeLiquidity(address sender, uint256 liquidity)": 1,
    "removeLiquidity(address tokenA, address tokenB, bool stable, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)": 4,
    "removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)": 32,
    "removeLiquidity(uint256 _amount, address[] _reserveTokens, uint256[] _reserveMinReturnAmounts)": 1,
    "removeLiquidity(uint256 _id, uint32 _portion)": 64,
    "removeLiquidity(uint256 _liquidity, uint256 _amountLqtyMin, uint256 _amountNativeTokenMin, address _to, uint256 _deadline)": 2,
    "removeLiquidity(uint256 basisPoints, address token)": 6,
    "removeLiquidity(uint256 lpTokenAmount, bool sendEth)": 11,
    "removeLiquidityETH(address pair, address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)": 1,
    "removeLiquidityETH(address token, uint256 liquidity, address pair)": 2,
    "removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)": 91,
    "removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)": 177,
    "removeLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline)": 6,
    "removeLiquiditySingleToken(address receiver,address market,uint256 netLpToRemove,tuple output)": 8,
    "removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)": 74,
    "removeMarketLiquidityDual(bytes32 _marketFactoryId, address _xyt, address _token, uint256 _exactInLp, uint256 _minOutXyt, uint256 _minOutToken)": 5,
    "removeShares(uint256 shares_,address owner_)": 1,
    "removeStake()": 2,
    "remove_liquidity(address _pool, uint256 _burn_amount, uint256[3] _min_amounts)": 9,
    "remove_liquidity(address _pool, uint256 _burn_amount, uint256[3] _min_amounts, bool _use_eth)": 10,
    "remove_liquidity(address _pool, uint256 _burn_amount, uint256[4] _min_amounts)": 35,
    "remove_liquidity(uint256 _amount, uint256[2] _min_amounts, bool _use_underlying)": 32,
    "remove_liquidity(uint256 _amount, uint256[2] min_amounts)": 53,
    "remove_liquidity(uint256 _amount, uint256[3] _min_amounts, bool _use_underlying)": 3,
    "remove_liquidity(uint256 _amount, uint256[3] min_uamounts)": 28,
    "remove_liquidity(uint256 _amount, uint256[4] min_amounts)": 12,
    "remove_liquidity_imbalance(address _pool, uint256[4] _amounts, uint256 _max_burn_amount)": 3,
    "remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount)": 139,
    "remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount)": 336,
    "remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount, bool donate_dust)": 26,
    "remove_liquidity_one_coin(uint256 _token_amount, uint256 i, uint256 min_amount)": 43,
    "remove_liquidity_one_coin(uint256 token_amount, uint256 i, uint256 min_amount, bool use_eth)": 12,
    "renew(string name, uint256 duration)": 23,
    "renewAll(string[] names, uint256 duration)": 14,
    "repay(address _lendToken, address _collateralToken, uint256 _amountCollateral)": 4,
    "repay(address _owner, uint256 _pid, uint256 _amount, address _payer)": 730,
    "repay(address _reserve, uint256 _amount, address _onBehalfOf)": 18,
    "repay(address to, bool skim, uint256 part)": 4,
    "repay(uint256 _collateralAmount, uint256 _syntheticAmount, bool collateralAsEth)": 1,
    "repay(uint256 _start, uint256 _end)": 10,
    "repay(uint256 amount)": 1,
    "repay(uint256 amount, address upperHint, address lowerHint, uint256 getId, uint256 setId)": 7,
    "repayAsset(uint256 _shares,address _borrower)": 26,
    "repayBehalf(address borrower)": 12,
    "repayBorrow(uint256 repayAmount)": 301,
    "repayBorrowERC20(bytes32 _lendingId, uint256 _amount)": 1,
    "repayCreditAccountETH(address borrower, address to)": 1,
    "repayETH(address lendingPool, uint256 amount, uint256 rateMode, address onBehalfOf)": 27,
    "repayLoan(uint256 _repayAmountInDAI)": 1,
    "repayRedeem(address apeTokenRepay, uint256 repayAmount, address apeTokenRedeem, uint256 redeemTokens, uint256 redeemAmount)": 3,
    "requestDepositFor(tuple _request)": 11,
    "requestExit(uint256 wad)": 3,
    "requestFailedMessageFix(bytes32 _txHash)": 9,
    "requestL2Transaction(address _contractL2,uint256 _l2Value,bytes _calldata,uint256 _l2GasLimit,uint256 _gasPricePerPubdata,bytes[] _factoryDeps,address _refundRecipient)": 12,
    "requestNft(bytes signature, uint256 _ticketId)": 3,
    "requestRedeem(uint256 shares,address owner)": 6,
    "requestRelease(bytes32 _partition, uint256 _amount, bytes _data)": 2,
    "requestUndelegation(uint256 delegationId)": 2,
    "requestUnstake(address[] _contracts, uint256[] _amounts, uint256 _insertAfter)": 12,
    "requestWithdraw()": 2,
    "requestWithdraw(uint256 _value)": 2,
    "requestWithdrawal(uint256 _pool, uint256 _amount)": 11,
    "requestWithdrawal(uint256 amountTokensToWithdraw)": 99,
    "rerollTrait(uint256 tokenId, uint256 traitBitShiftMultiplier)": 275,
    "rescueNFT(uint256 _idx)": 1,
    "reserve(uint256 _tokenId, uint256 _start, uint256 _end)": 1,
    "reserve(uint256 tokenId,uint256 internalId,bytes signature)": 1,
    "restake()": 159,
    "resurrectGA(uint256 weaponTokenId, uint256 chestTokenId, uint256 headTokenId, uint256 waistTokenId, uint256 footTokenId, uint256 handTokenId, uint256 neckTokenId, uint256 ringTokenId)": 9,
    "retrieve()": 4,
    "retrieveRewards(address voterAddress,uint256 roundId,tuple[] toRetrieve)": 59,
    "reveal()": 62,
    "reveal(uint256 _id, uint256[] _ids)": 1,
    "reveal(uint256 secret)": 12,
    "revealVote(bytes32 identifier, uint256 time, int256 price, bytes ancillaryData, int256 salt)": 4,
    "reviewTimestamp(address _account)": 1,
    "revokeConfirmation(uint256 transactionId)": 1,
    "robustSwapETHForSpecificNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)": 30,
    "robustSwapETHForSpecificNFTsAndNFTsToToken(tuple params)": 2,
    "robustSwapNFTsForToken(tuple[] swapList,address tokenRecipient,uint256 deadline)": 4,
    "robustSwapTokensForSpecificNFTsAndNFTsToToken(tuple params)": 1,
    "route(address[] path, uint256[] amounts, address[] addresses, address[] plugins, string[] data)": 1,
    "royalUpgrade(uint256[] tokenIds,bytes sig)": 1,
    "run(tuple input)": 49,
    "run(uint256 _amount, bytes32 _account_id)": 2,
    "sacrifice(bytes encoded,bytes token)": 1,
    "safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data)": 5,
    "safeDeposit(uint256[] gobblers,uint256 gooTokens,address receiver,uint256 minFractionsOut,uint256 deadline)": 1,
    "safeExecuteOrder(address nftAddress, uint256 assetId, uint256 price, bytes fingerprint)": 2,
    "safeExecuteSignaturesWithAutoGasLimit(bytes _data, bytes _signatures)": 13,
    "safeMint()": 1,
    "safeMint(uint256 _num)": 17,
    "safeMintGhostCloud(uint256 _amount, uint256 _price, bytes32[] _proof)": 1,
    "safeMintWL(uint256 numTokens)": 9,
    "safePurchase(uint32 _point, bool _unbooted, uint32 _spawnCount, bool _isProxyL2)": 1,
    "safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data)": 116,
    "safeTransferFrom(address from, address to, uint256 assetId)": 231,
    "safeTransferFrom(address from, address to, uint256 assetId, bytes userData)": 72,
    "safeTransferWhileNesting(address from, address to, uint256 tokenId)": 1,
    "saleMint(bytes32 hash, bytes signature, uint64 nonce, uint256 quantity)": 2,
    "saleMint(uint256 _quantity, uint256[] _gkIds)": 1,
    "saveAndStake(address _mAsset, address _save, address _vault, uint256 _amount)": 2,
    "saveViaMint(address _mAsset, address _save, address _vault, address _bAsset, uint256 _amount, uint256 _minOut, bool _stake)": 15,
    "saveWithdraw(bytes payload, bytes[] signatures)": 2,
    "scheduleDeposit(address _pool, uint256 _amount)": 2,
    "scheduleUnstake(uint256 amount)": 6,
    "scheduleWithdraw(address _llamaPay, address _from, address _to, uint216 _amountPerSec, uint40 _starts, uint40 _frequency)": 4,
    "scrapeMyTokens()": 15,
    "select(uint256 passId,uint256 selectedTokenId)": 1,
    "selectiveWithdraw(address[] _derivatives, uint256[] _amounts, uint256 _maxComponents, uint256 _deadline)": 1,
    "sell(address _reserveToken, uint256 _sellAmount, uint256 _minReturn)": 3,
    "sell(tuple sellParams)": 32,
    "sell(uint256 amount)": 1,
    "sellEthForTokenToUniswapV3(bytes encodedPath, uint256 minBuyAmount, address recipient)": 68,
    "sellRock(uint256 rockNumber, uint256 price)": 1,
    "sellStakingLot(uint256 amount)": 4,
    "sellToLiquidityProvider(address inputToken, address outputToken, address provider, address recipient, uint256 sellAmount, uint256 minBuyAmount, bytes auxiliaryData)": 70,
    "sellToUniswap(address[] tokens, uint256 sellAmount, uint256 minBuyAmount, bool isSushi)": 269,
    "sellTokenForEthToUniswapV3(bytes encodedPath, uint256 sellAmount, uint256 minBuyAmount, address recipient)": 134,
    "sellTokenForTokenToUniswapV3(bytes encodedPath, uint256 sellAmount, uint256 minBuyAmount, address recipient)": 246,
    "sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn)": 26,
    "send(address _receiver, address _token, uint256 _amount, uint64 _dstChainId, uint64 _nonce, uint32 _maxSlippage)": 28,
    "send(address _token, uint256 _amount, uint32 _destination, bytes32 _recipient, bool _enableFast)": 12,
    "send(address _tokenAddress, uint256 _amount, uint256 _chainIdTo, bytes _receiver, bytes _permit, bool _useAssetFee, uint32 _referralCode, bytes _autoParams)": 2,
    "sendERC20ToSidechain(bytes32 to, uint256 amount, address tokenAddress)": 3,
    "sendMultiSig(address toAddress, uint256 value, bytes data, uint256 expireTime, uint256 sequenceId, bytes signature)": 815,
    "sendMultiSigToken(address toAddress, uint256 value, address tokenContractAddress, uint256 expireTime, uint256 sequenceId, bytes signature)": 2084,
    "sendNative(address _receiver, uint256 _amount, uint64 _dstChainId, uint64 _nonce, uint32 _maxSlippage)": 3,
    "sendToAptos(address _token,bytes32 _toAddress,uint256 _amountLD,tuple _callParams,bytes _adapterParams)": 3,
    "sendToCosmos(address _tokenContract, bytes32 _destination, uint256 _amount)": 7,
    "sendToCosmos(address _tokenContract, string _destination, uint256 _amount)": 13,
    "sendToEVMLike(uint32 _domain, address _to, bool _enableFast)": 5,
    "sendToInjective(address _tokenContract, bytes32 _destination, uint256 _amount, string _data)": 13,
    "sendToL2(uint256 chainId, address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline, address relayer, uint256 relayerFee)": 80,
    "sendTokens(uint16 _dstChainId, bytes _to, uint256 _qty, address zroPaymentAddress, bytes adapterParam)": 1,
    "sendV2(address _srcTokenIn,uint256 _srcAmountIn,bytes _srcTokenInPermit,tuple _gateParams)": 2,
    "setAddr(bytes32 node, uint256 coinType, bytes addr_)": 13,
    "setAdventuresApprovedForAll(address operator,bool approved)": 4,
    "setApprovalForAll(address operator, bool authorized)": 2024,
    "setAsk(uint256 tokenId,tuple ask)": 7,
    "setAwakeningState(uint256[] tokenIds, bool state)": 1,
    "setBackgrounds(tuple[] settings)": 1,
    "setBatchAllocation(uint256[] amount,address[] nft,uint256[] chainId)": 4,
    "setBid(uint256 tokenId,tuple bid)": 11,
    "setBuyPrice(address token_, uint256 tokenId_, uint256 price_)": 1,
    "setBuybackEnabled(bool state, bool isCallPool)": 1,
    "setContenthash(bytes32 node, bytes hash)": 4,
    "setCooldownTimer(uint256 amount)": 2,
    "setDailyLimit(address _token, uint256 _dailyLimit)": 1,
    "setDefaultRoyalty(tuple royalty)": 1,
    "setDelegate(bytes32 id, address delegate)": 16,
    "setDelegationParameters(uint32 _indexingRewardCut, uint32 _queryFeeCut, uint32 _cooldownBlocks)": 6,
    "setDeveloperDAOFund(address _developerDAOFund)": 1,
    "setDivestmentTimestamp(uint64 timestamp, bool isCallPool)": 3,
    "setExecutionDailyLimit(address _token, uint256 _dailyLimit)": 1,
    "setExecutionMaxPerTx(address _token, uint256 _maxPerTx)": 1,
    "setExpirationTimestamp(uint256 timestamp)": 1,
    "setHotWallet(address hotWalletAddress, uint256 expirationTimestamp, bool lockHotWalletAddress)": 5,
    "setMany(string[] keys, string[] values, uint256 tokenId)": 1,
    "setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s)": 2,
    "setMaxPerTx(address _token, uint256 _maxPerTx)": 1,
    "setMultipleFeatures(uint256[] tokenIds,tuple[] featuress,bytes32[][] proofs)": 2,
    "setName(string name)": 19,
    "setOwner(bytes32 node, address owner)": 4,
    "setParams(uint256 tokenID, uint32[] v)": 1,
    "setPartners(address tokenManager, address smgAdminProxy, address smgFeeProxy, address quota, address sigVerifier)": 1,
    "setRegistry(address _regadr)": 4,
    "setRelayerApproval(address sender, address relayer, bool approved)": 32,
    "setResolver(bytes32 node, address resolver)": 2,
    "setRewardWeight(uint256 _weight)": 11,
    "setRewardsDestination(address destination)": 1,
    "setSalePrice(uint256 _heroId, uint256 _sellPrice)": 3,
    "setSubnodeOwner(bytes32 node, bytes32 label, address owner)": 7,
    "setSubnodeRecord(bytes32 node, bytes32 label, address owner_, address resolver_, uint64 ttl_)": 20,
    "setTelegramUsername(string _username)": 1,
    "setText(bytes32 node, string key, string value)": 6,
    "setToExpire()": 1,
    "setTokensStakeStatus(uint256[] tokenIds, bool setStake)": 5,
    "setTransferProxy(uint32 _point, address _proxy)": 1,
    "setUpdateOperator(uint256 assetId, address operator)": 27,
    "setUserEMode(uint8 categoryId)": 1,
    "setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral)": 5,
    "setVoterDialWeights(tuple[] _preferences)": 3,
    "setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm)": 1,
    "set_approve_deposit(address addr, bool can_deposit)": 3,
    "settle(uint256 settleAmount, uint256 debtAmount)": 1,
    "settleAuction()": 1,
    "settleAuction(string name,address owner,uint256 duration,address resolver,bytes[] data,bool reverseRecord)": 34,
    "settleCurrentAndCreateNewAuction()": 22,
    "settleExpired()": 1,
    "settlePositionAndWithdrawMargin(address _marginEngine, address _owner, int24 _tickLower, int24 _tickUpper)": 29,
    "signedMint(address to,bytes32 uuid,bytes32 mintData,uint256 expiresAt,uint256 price,bytes signature)": 7,
    "signedMint(bool reserved, bytes signature)": 2,
    "signedMint(uint256 numberOfTokens, uint256 maxPermitted, bytes signature, bytes32 nonce)": 1,
    "simpleBuy(tuple data)": 14,
    "simpleMigrateWithPermit(address vTokenA, address vTokenB, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": 1,
    "simpleSwap(tuple data)": 163,
    "singleERC721ListingFillWithPrecheck(address referrer, bytes data, uint8 exchangeKind, address collection, uint256 tokenId, address receiver, address expectedOwner, uint16 feeBps)": 8,
    "singleERC721ListingFillWithPrecheck(bytes data, uint8 exchangeKind, address collection, uint256 tokenId, address receiver, address expectedOwner, address feeRecipient, uint16 feeBps)": 1,
    "smgMint(bytes32 uniqueID, bytes32 smgID, uint256 tokenPairID, uint256 value, address tokenAccount, address userAccount, bytes r, bytes32 s)": 179,
    "smgMint(bytes32 uniqueID, bytes32 smgID, uint256 tokenPairID, uint256 value, uint256 fee, address tokenAccount, address userAccount, bytes r, bytes32 s)": 155,
    "smgMintNFT(bytes32 uniqueID,bytes32 smgID,uint256 tokenPairID,uint256[] tokenIDs,uint256[] tokenValues,bytes extData,address tokenAccount,address userAccount,bytes r,bytes32 s)": 23,
    "smgRelease(bytes32 uniqueID, bytes32 smgID, uint256 tokenPairID, uint256 value, address tokenAccount, address userAccount, bytes r, bytes32 s)": 1556,
    "smgRelease(bytes32 uniqueID, bytes32 smgID, uint256 tokenPairID, uint256 value, uint256 fee, address tokenAccount, address userAccount, bytes r, bytes32 s)": 428,
    "softStake(uint256[] tokenIds)": 78,
    "splat(uint256 splatId,address usingContractNFT,uint256 usingTokenId)": 2,
    "sponsorProposal(uint256 _id, uint256 _amount, uint256 _hint)": 2,
    "sponsorProposal(uint256 proposalId)": 4,
    "stake()": 2,
    "stake(address _mine, address stAddress, uint256 sTokens, uint256 _tier, uint256 sID)": 2,
    "stake(address _pair, uint256 _amount)": 252,
    "stake(address _strategyAddress, uint256 _tokenAmount, uint256 _stakeDuration, address _fTokensTo, bool _issueNFT)": 2,
    "stake(address _to, uint256 _amount, bool _rebasing, bool _claim)": 37,
    "stake(address operator, uint256[] tokenIds)": 1,
    "stake(address player, uint256 amount, bytes data)": 1,
    "stake(address songAddress, address levelXAddress, uint256[] levelXIds)": 10,
    "stake(address[] _tokens, uint256[] amounts, int256 nftId)": 3,
    "stake(address[] tokens, uint256[] values)": 3,
    "stake(bytes _validatorSignature, bytes32 _depositDataRoot)": 1,
    "stake(tuple[] _requests,uint256 _timePeriod)": 1,
    "stake(uint128 amount)": 7,
    "stake(uint128 amount, uint16 lockDays)": 1,
    "stake(uint256 _amount, uint64 _lockUntil)": 42,
    "stake(uint256 _amount, uint64 _lockUntil, bool _useSILV)": 3,
    "stake(uint256 _amount, uint8 _timespan)": 3,
    "stake(uint256 _stakeAmount, address _contractAddress)": 24,
    "stake(uint256 amount, bytes data)": 4,
    "stake(uint256 amount, bytes stakingdata, bytes rewarddata)": 2,
    "stake(uint256 amount, bytes4 stakeType, bytes data)": 1,
    "stake(uint256 amount, uint16 option, bool autorenew)": 3,
    "stake(uint256 amount, uint256 time, bytes data)": 1,
    "stake(uint256 caveId, uint256 tokenId)": 19,
    "stake(uint256 countryID)": 439,
    "stake(uint256 packs, uint256[] islApes)": 3,
    "stake(uint256 planIndex, uint256 amount, uint256 referrerID)": 7,
    "stake(uint256 stakeAmount, uint256 stakeTimeInDays, address referrer)": 13,
    "stake(uint256[] tokenIDList)": 17,
    "stake(uint256[] tokenIds, address stakeTo, uint16 _deposit, uint16 _rentalPerDay, uint16 _minRentDays, uint32 _rentableUntil)": 10,
    "stake(uint256[] tokenIds, uint256[] levels, address stakeTo, uint32 _maxTimestamp, bytes _signature)": 4,
    "stake(uint56 adding_amount)": 13,
    "stake(uint64 amount, uint64 unlockPeriod)": 4,
    "stakeAndClaimAethB()": 1,
    "stakeAndClaimAethC()": 1,
    "stakeById(uint256[] tokenIds)": 1,
    "stakeConsoles(uint16[] tokenIds)": 2,
    "stakeCreatures(uint256[] tokenIds)": 1,
    "stakeEnd(uint256 stakeIndex, uint40 stakeIdParam)": 33,
    "stakeEsAPEX(uint256 accountId,uint256 amount)": 1,
    "stakeFor(address user, uint256 amount)": 3,
    "stakeForgKDOE(uint256 amount)": 1,
    "stakeLocked(uint256 amount, uint256 secs)": 107,
    "stakeLockedCurveLp(uint256 _liquidity, uint256 _secs)": 13,
    "stakeNu(address operator, address beneficiary, address authorizer)": 1,
    "stakeProducerPass(uint256 episodeId, uint256 voteOptionId, uint256 amount)": 2,
    "stakeProducerPasses(uint256[] chapterIds,uint256[] amounts)": 3,
    "stakeRPL(uint256 _amount)": 1,
    "stakeRPLFor(address _nodeAddress, uint256 _amount)": 4,
    "stakeRewards(address provider, uint256 fullAmount, bytes32[] proof)": 9,
    "stakeRewards(uint256 _amount, address _stakerAccount)": 19,
    "stakeStart(uint256 newStakedSuns, uint256 newStakedDays)": 65,
    "stakeSwampers(uint256[] tokenIds)": 1,
    "stakeTeam(uint256 amount)": 1,
    "stakeToGno(uint256 stakeAmount, bytes _permitData)": 4,
    "stakeTokens(uint256 _quantity)": 2,
    "stakeTokens(uint256[] tokenIds)": 1,
    "stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": 17,
    "stakeWithPermit(uint256 amount,uint64 period,uint256 deadline,uint8 v,bytes32 r,bytes32 s)": 1,
    "stakeWool(uint256 pack, uint256 amount)": 31,
    "stakerToggleMigrator(address migrator_address)": 1,
    "startBridgeTokensViaAcross(tuple _bridgeData,tuple _acrossData)": 2,
    "startBridgeTokensViaAcross(tuple _lifiData,tuple _acrossData)": 1,
    "startBridgeTokensViaArbitrumBridge(tuple _bridgeData,tuple _arbitrumData)": 1,
    "startBridgeTokensViaCBridge(tuple _bridgeData,tuple _cBridgeData)": 1,
    "startBridgeTokensViaHopL1ERC20(tuple _bridgeData,tuple _hopData)": 1,
    "startBridgeTokensViaHyphen(tuple _lifiData,tuple _hyphenData)": 1,
    "startBridgeTokensViaMultichain(tuple _bridgeData,tuple _multichainData)": 1,
    "startBridgeTokensViaStargate(tuple _bridgeData,tuple _stargateData)": 1,
    "startConquest(uint256 _tokenId)": 1,
    "startCoolDown()": 4,
    "startCooldown(uint256 _units)": 1,
    "startCraftingPotionsBatch(uint256[] darkSpiritTokenIds,uint256[] darkHeroSpiritTokenIds)": 5,
    "startDistribution(bytes32[] _proof,uint256 _amount)": 5,
    "startExecution(tuple[] actions,tuple[] inputs,tuple fee,tuple[] requiredOutputs)": 2,
    "startExitCooldown()": 1,
    "startExitWithBurntTokens(bytes data)": 6,
    "startMintstoneMigration(uint256[] mintstoneIds)": 1,
    "startTraining(uint256[] shogunIds)": 5,
    "startUnmaskingVillainsBatch(uint256[] maskedVillainTokenIds,uint256[] villainPotionTokenIds,uint256[] superVillainPotionTokenIds)": 3,
    "startUnstake()": 2,
    "stepInside(uint256 _DGAmount)": 7,
    "stepOutside(uint256 _xDGAmount)": 1,
    "stopTraining(uint256[] ids)": 1,
    "submit()": 3,
    "submit(address id)": 52,
    "submit(uint256 _amount, bytes32 _terra_address, bytes _extra_data, uint256 _expected_version)": 9,
    "submit(uint256 _answer)": 2,
    "submitAndDeposit(address recipient)": 9,
    "submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous)": 1,
    "submitAnswerERC20(bytes32 question_id, bytes32 answer, uint256 max_previous, uint256 tokens)": 1,
    "submitEntry(uint8[] variantIds)": 1,
    "submitManyTokens(address[] tokenAddresses,uint256[] tokenAmount)": 3,
    "submitOrder(string orderId, string inventoryType, uint256 quantity)": 1,
    "submitProposal(address applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, string details)": 4,
    "submitTraits(tuple payload,bytes signature)": 7,
    "submitTransaction(address destination, uint256 value, bytes data)": 189,
    "submitVerification(string _sig)": 1,
    "submitVote(uint256 _proposalId, uint256 _solutionChosen)": 4,
    "submitVote(uint256 _task, bool proposal)": 14,
    "submitVote(uint256 proposalIndex, uint8 uintVote)": 4,
    "submitWithdrawal(tuple _receipt,tuple[] _signatures)": 45,
    "summon(bytes32[] _merkleProof, bool _isRebase)": 2,
    "summon(uint256 goddessID)": 1,
    "summon(uint256 sewerPassId,uint256 rank,bytes32[] merkleProof)": 6,
    "summonMany(tuple[] mintData)": 4,
    "supply(address asset, uint256 amount)": 61,
    "supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode)": 28,
    "supply(address platform, address token, uint256 amount)": 12,
    "supply(address token_, uint256 amount_, address to_)": 3,
    "supplyERC721(address asset,tuple[] tokenData,address onBehalfOf,uint16 referralCode)": 1,
    "supplyEth(address to_)": 7,
    "supplyEth(address to_, bytes swapData_)": 4,
    "supplyWithPermit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode, uint256 deadline, uint8 permitV, bytes32 permitR, bytes32 permitS)": 2,
    "swap()": 11,
    "swap(address account, uint256 _chipAmount, uint256 _fishAmount)": 3,
    "swap(address caller,tuple desc,bytes data)": 15,
    "swap(address caller,tuple desc,bytes executorData,bytes clientData)": 46,
    "swap(address caller,tuple desc,tuple[] calls)": 9,
    "swap(address executor,tuple desc,bytes permit,bytes data)": 925,
    "swap(address sell_token, uint256 sell_amount, address buy_token, uint256 min_output, uint256 deadline)": 5,
    "swap(address src, address dst, uint256 amount, uint256 minReturn, address referral)": 1,
    "swap(bool _isInu, uint256 _swapAmount, uint256 _maxAmount, bytes _sig)": 1,
    "swap(string aggregatorId, address tokenFrom, uint256 amount, bytes data)": 633,
    "swap(tuple execution)": 17,
    "swap(tuple order)": 1,
    "swap(tuple params)": 309,
    "swap(tuple[] inputs,tuple[] outputs,uint256 valueOutQuote,uint256 valueOutMin,address executor,bytes pathDefinition)": 1,
    "swap(uint16 _dstChainId,uint256 _srcPoolId,uint256 _dstPoolId,address _refundAddress,uint256 _amountLD,uint256 _minAmountLD,tuple _lzTxParams,bytes _to,bytes _payload)": 18,
    "swap(uint256 _tokenId)": 9,
    "swap(uint256 _tokenId, uint256 _amount, uint256 _destTokenId)": 8,
    "swap(uint256 id, uint256 amount, uint256 index, bytes32[] proofs)": 1,
    "swapAll()": 19,
    "swapAndBridge(uint256 amountIn,uint256 amountOutMin,uint16 dstChainId,address to,address refundAddress,address zroPaymentAddress,bytes adapterParams)": 1,
    "swapAndDeposit(address assetToSwapFrom,address assetToSwapTo,uint256 amountToSwap,uint256 minAmountToReceive,uint256 swapAllBalanceOffset,bytes swapCalldata,address augustus,tuple permitParams)": 16,
    "swapAndRepay(address collateralAsset,address debtAsset,uint256 collateralAmount,uint256 debtRepayAmount,uint256 debtRateMode,tuple permitSignature,bool useEthPath)": 12,
    "swapAndRepay(address collateralAsset,address debtAsset,uint256 collateralAmount,uint256 debtRepayAmount,uint256 debtRateMode,uint256 buyAllBalanceOffset,bytes paraswapData,tuple permitSignature)": 29,
    "swapAndStartBridgeTokensViaNXTP(tuple _lifiData,tuple[] _swapData,tuple _nxtpData)": 2,
    "swapBorrowRateMode(address asset, uint256 rateMode)": 6,
    "swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline)": 10,
    "swapETHForSpecificNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)": 11,
    "swapErc20(address token, address recipient, uint256 amount)": 195,
    "swapEth(address recipient)": 11,
    "swapExactETHForTokens(tuple _swap,uint256 _bribe)": 2,
    "swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)": 204,
    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)": 7,
    "swapExactFraxForTemple(uint256 amountIn, uint256 amountOutMin, address to, uint256 deadline)": 11,
    "swapExactIn(address _tokenIn, address _tokenOut, uint256 _inAmount, uint256 _minOutAmount, bytes32 _marketFactoryId)": 3,
    "swapExactPtForToken(address receiver,address market,uint256 exactPtIn,tuple output)": 4,
    "swapExactPtForYt(address receiver,address market,uint256 exactPtIn,uint256 minYtOut,tuple guessTotalPtToSwap)": 5,
    "swapExactSyForPt(address receiver,address market,uint256 exactSyIn,uint256 minPtOut,tuple guessPtOut)": 2,
    "swapExactSyForYt(address receiver,address market,uint256 exactSyIn,uint256 minYtOut,tuple guessYtOut)": 17,
    "swapExactTempleForFrax(uint256 amountIn, uint256 amountOutMin, address to, uint256 deadline)": 5,
    "swapExactTempleForStable(uint256 amountIn, uint256 amountOutMin, address stable, address to, uint256 deadline)": 11,
    "swapExactTokenForPt(address receiver,address market,uint256 minPtOut,tuple guessPtOut,tuple input)": 1,
    "swapExactTokenForYt(address receiver,address market,uint256 minYtOut,tuple guessYtOut,tuple input)": 35,
    "swapExactTokensForETH(tuple _swap,uint256 _bribe)": 1,
    "swapExactTokensForETH(uint256 amountIn, address[] path, address to, address ref)": 1,
    "swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)": 644,
    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)": 16,
    "swapExactTokensForTokens(tuple _swap,uint256 _bribe)": 2,
    "swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to)": 1,
    "swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)": 1550,
    "swapExactTokensForTokens(uint256 amountIn,uint256 amountOutMin,tuple[] routes,address to,uint256 deadline)": 6,
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)": 12,
    "swapExactYtForPt(address receiver,address market,uint256 exactYtIn,uint256 minPtOut,tuple guessTotalPtFromSwap)": 2,
    "swapExactYtForSy(address receiver,address market,uint256 exactYtIn,uint256 minSyOut)": 19,
    "swapFor(address _umb)": 1,
    "swapFrom(uint256 _uniswapPortion,uint256 _balancerPortion,uint256 _minTokensOut,uint256 _idealTokensOut,uint256 _tokensIn)": 5,
    "swapGeneric(tuple execution)": 1,
    "swapIn(address tcRouter, address tcVault, string tcMemo, address token, uint256 amount, address router, bytes data, uint256 deadline)": 8,
    "swapKAI(address _toAddress, uint256 _amount)": 3,
    "swapNFTsForToken(tuple[] swapList,uint256 minOutput,address tokenRecipient,uint256 deadline)": 8,
    "swapOnUniswapV2Fork(address tokenIn, uint256 amountIn, uint256 amountOutMin, address weth, uint256[] pools)": 70,
    "swapOnUniswapV2ForkWithPermit(address tokenIn, uint256 amountIn, uint256 amountOutMin, address weth, uint256[] pools, bytes permit)": 8,
    "swapOnZeroXv4(address fromToken, address toToken, uint256 fromAmount, uint256 amountOutMin, address exchange, bytes payload)": 28,
    "swapOnZeroXv4WithPermit(address fromToken, address toToken, uint256 fromAmount, uint256 amountOutMin, address exchange, bytes payload, bytes permit)": 5,
    "swapRouter1Inch(address router1Inch,bytes router1InchData,tuple desc,bytes clientData)": 2,
    "swapSimpleMode(address caller,tuple desc,bytes executorData,bytes clientData)": 13,
    "swapThroughOrionPool(uint112 amount_spend, uint112 amount_receive, address[] path, bool is_exact_spend)": 1,
    "swapTo(uint256 _uniswapPortion,uint256 _balancerPortion,uint256 _minTokensOut,uint256 _idealTokensOut)": 5,
    "swapToken()": 2,
    "swapToken(address targetToken, uint256 amountOutMin)": 1,
    "swapTokens(uint16 _dstChainId,uint16 _srcPoolId,uint16 _dstPoolId,uint256 _amountLD,uint256 _minAmountLD,tuple _lzTxParams,bytes _to,bytes2 _partnerId,tuple _feeObj)": 1,
    "swapTokens(uint256 amount)": 18,
    "swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)": 89,
    "swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)": 270,
    "swapTokensGeneric(tuple _lifiData,tuple[] _swapData)": 1,
    "swap_from_synth(uint256 _token_id, address _to, uint256 _amount, uint256 _expected)": 15,
    "swap_in(uint256 amount, uint256 minOut)": 3,
    "swap_into_synth(address _from, address _synth, uint256 _amount, uint256 _expected)": 21,
    "switchAutorenew(uint16 stakeIndex)": 1,
    "take(uint256 id, uint256 amt, uint256 max, address who, bytes data)": 1,
    "teamMint(uint8[] sizes)": 1,
    "tend(uint256 id, uint256 lot, uint256 bid)": 52,
    "toAMM(bytes _payload)": 6,
    "toPMM(bytes _payload)": 11,
    "toRFQ(bytes _payload)": 2,
    "toggleNesting(uint256[] tokenIds)": 6,
    "tokenSwap(uint256 amount)": 1,
    "tokenizeYield(bytes32 _forgeId, address _underlyingAsset, uint256 _expiry, uint256 _amountToTokenize, address _to)": 1,
    "topUp(address operator, uint96 amount)": 2,
    "tossFeed(uint256[] tokenIds, bytes signature)": 14,
    "trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount)": 1,
    "tradeBySourceAmount(address sourceToken, address targetToken, uint256 sourceAmount, uint256 minReturnAmount, uint256 deadline, address beneficiary)": 6,
    "tradeSingleHop(tuple quote)": 5,
    "trancheAndDeposit(address perp, address bond, uint256 collateralAmount, uint256 feePaid)": 2,
    "transfer(address _to, uint256 _value)": 108380,
    "transferAdmin(address newAdmin)": 1,
    "transferAndCall(address _to, uint256 _value, bytes _data)": 34,
    "transferAndSettle(address to, uint256 value)": 1,
    "transferAssets(tuple erc20Details,tuple[] erc721Details,tuple[] erc1155Details,address recipient)": 1,
    "transferBatch(tuple[] pairs,address to)": 39,
    "transferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes _data, bytes _operatorData)": 3,
    "transferERC1155(tuple[] erc1155Details,address recipient)": 3,
    "transferERC20(address _tokenAddress, address _to, uint256 _value)": 3,
    "transferERC721(tuple[] erc721Details,address recipient)": 10,
    "transferFrom(address _from, address _to, uint256 _value)": 388,
    "transferIdeaTokens(uint256 marketID, uint256 tokenID, address l2Recipient, uint256 gasLimit, uint256 maxSubmissionCost, uint256 l2GasPriceBid)": 14,
    "transferLiquiditySameSyNormal(tuple fromMarket,tuple toMarket)": 1,
    "transferManyLandToEstate(int256[] x, int256[] y, uint256 estateId)": 1,
    "transferOwnership(address newOwner)": 1,
    "transferPack(uint256[] tokenIds, uint256 newPack)": 1,
    "transferPoint(uint32 _point, address _target, bool _reset)": 11,
    "transferPunk(address to, uint256 punkIndex)": 10,
    "transferStashL2(address _to, bytes32[] _stashIds, uint256 _maxGas, uint256 _gasPriceBid)": 1,
    "transferTimeLockedTokensAfterTimePeriod(address token, address to, uint256 amount)": 11,
    "transferToNear(uint256 _amount, string _nearReceiverAccountId)": 1,
    "transferToOtherBlockchain(uint128 blockchain, uint256 amount, string newAddress)": 4,
    "transferTokens(address beneficiary)": 3,
    "transferTokens(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce)": 95,
    "transferWool(uint256 oldPack, uint256 newPack)": 3,
    "transmuteAndClaim()": 1,
    "transmuteClaimAndWithdraw(bool asEth)": 2,
    "treasuryMint(uint256 quantityEligible_, bytes32[] proof_, uint256 quantityToMint_)": 1,
    "unStake()": 2,
    "unStake(address _token)": 13,
    "unStake(address userAddress, uint256 stakeId)": 2,
    "unbond(uint256 value)": 23,
    "undelegate(address _indexer, uint256 _shares)": 2,
    "undelegate(address _operator)": 1,
    "undelegateStash(bytes32 _stashId)": 1,
    "undelegateTokens(address _valAddr, uint256 _tokens)": 2,
    "uniswapV3Swap(uint256 amount, uint256 minReturn, uint256[] pools)": 1023,
    "uniswapV3SwapTo(address recipient, uint256 amount, uint256 minReturn, uint256[] pools)": 5,
    "uniswapV3SwapToWithPermit(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools, bytes permit)": 81,
    "unlock()": 5,
    "unlock(address _token, address _recipient)": 25,
    "unlock(address to)": 23,
    "unlock(bytes proof, bytes rawHeader, bytes headerProof, bytes curRawHeader, bytes headerSig)": 1,
    "unlock(uint256 _tokenId, address _recipient)": 3,
    "unlock(uint256 part)": 26,
    "unlockActivation(address _guardian, address _lockManager, uint256 _amount, bool _requestDeactivation)": 3,
    "unlockAll()": 1,
    "unlockAndRedeemAll()": 1,
    "unlockBoxes(uint256[] tokenIds)": 7,
    "unlockReward(address[] _tokenList, bool _bBuyCoverUnlockedAmt, bool _bClaimUnlockedAmt, bool _bReferralUnlockedAmt)": 1,
    "unlockToken(bytes proofData, uint64 proofBlockHeight)": 58,
    "unlockTrait(uint256 tokenID,bytes32 messageHash,bytes signature)": 13,
    "unlockWithKey(uint256 keyId, uint128 dropId, uint256 variant)": 2,
    "unmaskVillainsBatch(uint256[] claimIds)": 2,
    "unmeow(address to, uint256 amount)": 1,
    "unoswap(address srcToken, uint256 amount, uint256 minReturn, bytes32[])": 1273,
    "unoswap(address srcToken,uint256 amount,uint256 minReturn,uint256[] pools)": 127,
    "unoswapToWithPermit(address recipient,address srcToken,uint256 amount,uint256 minReturn,uint256[] pools,bytes permit)": 5,
    "unoswapWithPermit(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools, bytes permit)": 31,
    "unstake()": 9,
    "unstake(address _pair, uint256 _amount)": 19,
    "unstake(address _to, uint256 _amount, bool _trigger, bool _rebasing)": 46,
    "unstake(address beneficiary, uint256 stakeAmount, uint256 rewardsAmount)": 5,
    "unstake(address songAddress, address levelXAddress, uint256[] levelXIds)": 1,
    "unstake(address vault)": 2,
    "unstake(address[] tokens, uint256[] values)": 6,
    "unstake(uint128 amount)": 1,
    "unstake(uint256 _amount, address _customerAddress)": 1,
    "unstake(uint256 _id, bool _isNFT, uint256 _fTokenToBurn)": 3,
    "unstake(uint256 amount)": 90,
    "unstake(uint256 amount, bool claim)": 42,
    "unstake(uint256 amount, bytes data)": 4,
    "unstake(uint256 amount, bytes stakingdata, bytes rewarddata)": 1,
    "unstake(uint256 caveId, uint256 tokenId)": 26,
    "unstake(uint256 poolId, uint256 amount, bool claim)": 34,
    "unstake(uint256 stakeID, bytes data, bool _isForced)": 3,
    "unstake(uint256[] _cardIds)": 7,
    "unstake(uint256[] _cardIds, uint256[] _cardAmounts)": 1,
    "unstakeAll()": 1,
    "unstakeAll(address _pair)": 1,
    "unstakeAllUnlocked(bytes _data)": 2,
    "unstakeAndClaim(address vault, uint256 amount, bytes permission)": 1,
    "unstakeAndDepositIntoVault(uint256 _amountOGT, address vault)": 1,
    "unstakeAndDepositTempleWithFaith(uint256 _amountOGT, uint112 _amountFaith, address vault)": 1,
    "unstakeAndRelease()": 1,
    "unstakeAndWithdraw()": 4,
    "unstakeClaimTokens_new(uint256 unbondNonce)": 25,
    "unstakeConsoles(uint16[] tokenIds)": 1,
    "unstakeFor(address _accountAddress, uint256 _amount)": 2,
    "unstakeMultiple(tuple[] _stakes,bool _unstakingYield)": 3,
    "unstakeNu(address operator, uint96 amount)": 1,
    "unstakeOHM(uint256 amountToWithdraw_)": 5,
    "unstakeProducerPasses(uint256 episodeId, uint256 voteOptionId)": 2,
    "unstakeQuery(uint256 amount)": 1,
    "unstakeSushiFromAave(address to, uint256 amount)": 1,
    "unstakeT(address operator, uint96 amount)": 1,
    "unstakeToken(tuple key,uint256 tokenId)": 2,
    "unwoof(uint256 amount)": 3,
    "unwrap(address recipient, uint256 tokenId)": 2,
    "unwrap(uint256 amount)": 27,
    "unwrapTo(address _to, uint256 _amount)": 2,
    "unwrapToxBTRFLY(uint256 _amount)": 3,
    "updateDelegateKey(address memberAddr, address newDelegateKey)": 5,
    "updateLandData(int256 x, int256 y, string data)": 14,
    "updateLock(uint64 period)": 1,
    "updateMetadata(uint256 estateId, string metadata)": 12,
    "updateOperator(uint256 _vaultId, address _operator)": 3,
    "updatePositionMargin(address _marginEngine, int24 _tickLower, int24 _tickUpper, int256 _marginDelta, bool _fullyWithdraw)": 30,
    "updateSilo(address account)": 35,
    "updateUserPrice(uint256 _new)": 1,
    "upgrade()": 1,
    "upgrade(uint256 value)": 2,
    "upgradeKey(uint256 _raribleTokenId, uint256 _amount)": 1,
    "upgradeMultiple(uint256[] _primaryTokenIds,uint256 _targetEvoNum,uint256[] _tokenIdsToBurn)": 18,
    "upgradeRelic(uint256 tokenId,uint256 newRarity,bytes signature)": 5,
    "upgradeTo(address imp)": 1,
    "useFounderPass(uint256[] ids)": 1,
    "userBurn(bytes32 smgID, uint256 tokenPairID, uint256 value, uint256 fee, address tokenAccount, bytes userAccount)": 242,
    "userBurnNFT(bytes32 smgID,uint256 tokenPairID,uint256[] tokenIDs,uint256[] tokenValues,address tokenAccount,bytes userAccount)": 6,
    "userDeposit(uint256 _amount)": 1,
    "userLock(bytes32 smgID, uint256 tokenPairID, uint256 value, bytes userAccount)": 935,
    "userLockNFT(bytes32 smgID,uint256 tokenPairID,uint256[] tokenIDs,uint256[] tokenValues,bytes userAccount)": 4,
    "userRegister(uint256 index, address account, uint256 amount, bytes32[] merkleProof)": 1,
    "userWithdrawTokens()": 1,
    "user_checkpoint(address addr)": 6,
    "validateList(uint256[] tokenIds, bytes[] decryptedSecrets, bytes32[][] proofs)": 2,
    "vaultWithdraw(uint256 amount)": 1,
    "verifyAndClaimReward(address account, uint256 totalAmount, bytes32[] merkleProof)": 7,
    "vest()": 8,
    "vest(uint256 amount)": 2,
    "vest(uint256[] entryIDs)": 66,
    "vestEarning()": 1,
    "vestScheduleForMultipleTokensAtIndices(address[] tokens, uint256[][] indices)": 3,
    "vote(address poolAddress, uint56 amount)": 10,
    "vote(address[] _tokenVote, uint256[] _weights)": 6,
    "vote(address[] pools,uint64[] weights)": 26,
    "vote(bytes32 _hash)": 4,
    "vote(bytes[] _encodedVotes)": 2,
    "vote(uint256 _id, uint256 _amount, bool _affirmative, uint256 _hint)": 5,
    "vote(uint256 _id,uint256 _amount,bool _affirmative,address _account,uint256 _hint)": 4,
    "vote(uint256 _voteId, bool _supports, bool _executesIfDecided)": 9,
    "vote(uint256 dareId, uint256 amount)": 1,
    "vote(uint256[] pollIds, uint256[] optionIds)": 3,
    "vote(uint32 candidate)": 1,
    "vote_for_gauge_weights(address _gauge_addr, uint256 _user_weight)": 316,
    "vote_for_many_gauge_weights(address[8] _gauge_addrs, uint256[8] _user_weight)": 5,
    "webMint(uint256 _ogHoldQuantity,uint256 _mintQuantity,bytes32[] _proof)": 1,
    "whitelistMint()": 7,
    "whitelistMint(address _account, uint256 _quantity, bytes32[] _proof, string _soulType)": 1,
    "whitelistMint(address _to, bytes32[] _merkleProof)": 1,
    "whitelistMint(address account, uint256 tokenId, bytes32[] proof)": 1,
    "whitelistMint(bytes32[] proof_)": 6,
    "whitelistMint(tuple[] _data)": 1,
    "whitelistMint(uint256 _mintAmount)": 1,
    "whitelistMint(uint256 amount, bytes signature)": 1,
    "whitelistMint(uint256 amount, uint256 totalAllocation, bytes32 leaf, bytes32[] proof)": 1,
    "whitelistMint(uint256 num, bytes32[] proof)": 2,
    "whitelistMint(uint256 qt, uint256 initialAllowance, bytes signature)": 1,
    "whitelistPurchase(address to, address contractAddress, uint256 amount, bytes32[] proof)": 1,
    "whitelistedMint(bytes32[] _proof)": 1,
    "winnerDepositExtra(bytes signature)": 1,
    "withdraw()": 142,
    "withdraw(address _from, address _to, uint256 _value)": 7,
    "withdraw(address _oracle, uint256 _timestamp, uint256 _outcome)": 1,
    "withdraw(address account, uint256 withdrawETH, address[] tokens)": 1,
    "withdraw(address addr)": 3,
    "withdraw(address asset, address recipient, uint128 amount, bool claim)": 5,
    "withdraw(address assetAddress, uint112 amount)": 5,
    "withdraw(address from, address to, uint216 amountPerSec)": 14,
    "withdraw(address recipient, uint256 minimum, address token, uint256 nonce, uint256 expiry, uint256 score, uint8 v, bytes32 r, bytes32 s)": 18,
    "withdraw(address to, uint256 value)": 108,
    "withdraw(address token, uint256 amount, address destination)": 910,
    "withdraw(address token_, address from, address to, uint256 amount, uint256 share)": 14,
    "withdraw(address user, address _token)": 1,
    "withdraw(bytes _wdmsg, bytes[] _sigs, address[] _signers, uint256[] _powers)": 62,
    "withdraw(bytes proofData, uint64 proofBlockHeight)": 22,
    "withdraw(bytes32 transactionHash, address tokenContract, address recipient, uint256 value, uint8[] v, bytes32[] r, bytes32[] s)": 2,
    "withdraw(int256 _referrerID)": 6,
    "withdraw(string webd_address, uint256 tokens)": 11,
    "withdraw(tuple withdrawParams)": 4,
    "withdraw(tuple[] claims,address token)": 10,
    "withdraw(uint16 _auctionIndex)": 5,
    "withdraw(uint16 currencyId, uint88 amountInternalPrecision, bool redeemToUnderlying)": 1,
    "withdraw(uint256 _amount, address _recipient, bool _amountIncludesFee, bool _exitCooldown)": 1,
    "withdraw(uint256 _amount, address _to)": 70,
    "withdraw(uint256 _amount, bool profitOrFail)": 166,
    "withdraw(uint256 _amount,uint256 _token_index,bool _tranche,uint256 _minAmount)": 1,
    "withdraw(uint256 _amountIn, uint256 _minAmountOut, address _to, bool _withPenalty, address _unwindStrategy)": 1,
    "withdraw(uint256 _eth, uint256 _wei)": 399,
    "withdraw(uint256 _numberOfShares, bool _token0, bool _token1, uint256 _sqrtRatioX96, uint256 _tolerance)": 3,
    "withdraw(uint256 _numberOfShares, bool _token0, bool _token1, uint256 _sqrtRatioX96, uint256 _tolerance, uint256 _amount0OutMin, uint256 _amount1OutMin, uint160 _sqrtPriceLimitX96)": 1,
    "withdraw(uint256 _pid, address _farmed, address _received)": 3,
    "withdraw(uint256 _pid, uint256 _amount, address _ref)": 39,
    "withdraw(uint256 _pid, uint256 _fpid, uint256 _amount)": 7,
    "withdraw(uint256 _wantAmt, bool bEarn, bool bFarm)": 3,
    "withdraw(uint256 amount)": 1241,
    "withdraw(uint256 amount, uint256 deadline, uint256 slippage, uint256 ethPerToken, uint256 ethPerFarm, uint256 tokensPerEth)": 1,
    "withdraw(uint256 amount, uint256[] minReturns)": 29,
    "withdraw(uint256 amount_, address token_address, address address_from, address address_to)": 6,
    "withdraw(uint256 share, uint8 option)": 1,
    "withdraw(uint256 shares, uint256 amount0Min, uint256 amount1Min, address to)": 1,
    "withdraw(uint256 weiAmount, bytes signedData)": 2,
    "withdraw(uint256[] nonces)": 8,
    "withdraw(uint56 removing_amount)": 1,
    "withdraw(uint64 depositID, uint256 virtualTokenAmount, bool early)": 7,
    "withdrawAA(uint256 _amount)": 1,
    "withdrawAll()": 18,
    "withdrawAll(address _recipient)": 6,
    "withdrawAll(address _recipient, uint256 _minimumOut, uint8 _option)": 2,
    "withdrawAll(bool selfdistruct_)": 37,
    "withdrawAll(uint256 _pid)": 3,
    "withdrawAllAndClaim(uint256 _pid, uint256 _minOut, uint8 _option)": 1,
    "withdrawAllAndHarvest(uint256 pid, address to)": 8,
    "withdrawAllAndReassignBatch(bool isCallPool, uint256[] tokenIds, uint256[] contractSizes)": 1,
    "withdrawAllBase()": 4,
    "withdrawAllQuote()": 2,
    "withdrawAllSingle(bool pwrd, uint256 index, uint256 minAmount)": 2,
    "withdrawAndClaim()": 1,
    "withdrawAndClaim(uint256 _pid, uint256 _shares, uint256 _minOut, uint8 _option)": 4,
    "withdrawAndClaimPrime(uint256 pid, uint256 amount)": 1,
    "withdrawAndExchange(string[] inputCurrencyCodes,uint256[] inputAmounts,address outputErc20Contract,tuple[][] orders,bytes[][] signatures,uint256[] makerAssetFillAmounts,uint256[] protocolFees)": 1,
    "withdrawAndHarvest(uint256 pid, uint256 amount, address to)": 4,
    "withdrawAndMigrate()": 13,
    "withdrawAndMigrate(uint256 amount,uint256 numOfCycles)": 4,
    "withdrawAndRestake()": 1,
    "withdrawAndUnwrap(uint256 _amount)": 25,
    "withdrawAndUnwrap(uint256 _amount, uint256 _minAmountOut, address _output, address _beneficiary, address _router, bool _isBassetOut)": 4,
    "withdrawAndUnwrap(uint256 amount, bool claim)": 467,
    "withdrawAs(address _to, uint256 _shares, uint8 option, uint256 minAmountOut)": 1,
    "withdrawAvailableBalance()": 4,
    "withdrawAvailableTokens()": 2,
    "withdrawBAKC(tuple[] _baycPairs,tuple[] _maycPairs)": 5,
    "withdrawBalance(address _to, uint256 _value)": 5,
    "withdrawBeans(uint32[] crates, uint256[] amounts)": 1,
    "withdrawBidForGod(uint256 _godId)": 3,
    "withdrawBidForPunk(uint256 punkIndex)": 16,
    "withdrawBounty(uint256 validatorId, address to)": 5,
    "withdrawCollateral(address _asset, uint256 _amount, uint256 _slippage, address _to)": 2,
    "withdrawDelegated(address _indexer, address _delegateToIndexer)": 3,
    "withdrawDividends(uint256 amount)": 1,
    "withdrawERC20(address token, address recipient, uint256 amount, uint256 txId, bytes32 txHash, uint256 target_chain, bytes signature)": 206,
    "withdrawERC20For(uint256 _withdrawalId, address _user, address _token, uint256 _amount, bytes _signatures)": 34,
    "withdrawERC721(address nftContract, uint256[] tokenIds)": 44,
    "withdrawETH()": 1,
    "withdrawETH(address lendingPool, uint256 amount, address to)": 493,
    "withdrawETH(uint256 _amount, address _recipient)": 22,
    "withdrawETH(uint256 _pid, uint256 _amount)": 4,
    "withdrawETH(uint256 amount)": 43,
    "withdrawETHGainToTrove(address _upperHint, address _lowerHint)": 1,
    "withdrawEarning(uint256 amount)": 8,
    "withdrawEpochs(uint256[] epochs, uint256 length)": 5,
    "withdrawErc20(address token, address recipient, uint256 amount, uint256 nonce, bytes signature)": 26,
    "withdrawErc20FromEgg(uint256 eggId, address[] tokens, uint256[] amounts, address to)": 2,
    "withdrawEth(address recipient, uint256 amount, uint256 nonce, bytes signature)": 3,
    "withdrawEth(address recipient, uint256 amount, uint256 txId, bytes32 txHash, uint256 target_chain, bytes signature)": 15,
    "withdrawFinalize()": 1,
    "withdrawFrom(address _from, uint256 _optionId)": 2,
    "withdrawFromQueue(uint256 _round)": 1,
    "withdrawFromSP(uint256 _amount)": 38,
    "withdrawFromSalary(uint256 salaryId, uint256 amount)": 31,
    "withdrawFromStream(uint256 streamId, uint256 amount)": 27,
    "withdrawFunds()": 31,
    "withdrawInstantly(uint256 amount)": 4,
    "withdrawInstantlyFrom(address from, uint256 amount, address controlledToken, uint256 maximumExitFee)": 6,
    "withdrawInterest(uint256 _amount, address _destination)": 4,
    "withdrawLiquidity(uint256 _amount, address _tokenAddress, address _to)": 2,
    "withdrawLiquidity(uint256 amount)": 2,
    "withdrawLocked(bytes32 kek_id)": 42,
    "withdrawLocked(bytes32 kek_id, address destination_address)": 56,
    "withdrawLocked(uint256 _amount)": 31,
    "withdrawLockedAndUnwrap(bytes32 _kek_id)": 23,
    "withdrawMultiple(address[] _darknodes, address[] _tokens)": 2,
    "withdrawNative(address to, uint256 value, string proof, bytes32 taskHash)": 268,
    "withdrawNative(address token, uint256 amount, address to)": 1,
    "withdrawNoun(uint256 _nounId)": 1,
    "withdrawPoolTokens()": 1,
    "withdrawPremium(uint256 demandIndex)": 1,
    "withdrawPrincipal(uint256 _amount, address _destination)": 7,
    "withdrawProtected(uint256 minimumAmount, address recipient, address token, uint256 nonce, uint256 expiry, address participant, uint256 score, uint8 v, bytes32 r, bytes32 s)": 3,
    "withdrawQuote(uint256 amount)": 1,
    "withdrawRLP(uint256 amount)": 1,
    "withdrawRegular(uint256 amount)": 2,
    "withdrawReward(address stakerAddress)": 6,
    "withdrawReward(address[] rewardTokens)": 1,
    "withdrawReward(uint256 _amount, address _tokenAddress, address _to)": 3,
    "withdrawRewards()": 59,
    "withdrawRewards(address _delegator, address _cluster)": 2,
    "withdrawSelfApeCoin(uint256 _amount)": 13,
    "withdrawSelfBAYC(tuple[] _nfts)": 1,
    "withdrawSelfMAYC(tuple[] _nfts)": 1,
    "withdrawShare()": 2,
    "withdrawStake(address _from, uint256 _amount)": 6,
    "withdrawSurplus(uint256 _amount)": 7,
    "withdrawToPoint(uint256 _amount)": 2,
    "withdrawToWallet(uint256 amount)": 2,
    "withdrawToken(address _token, address to, uint256 value, string proof, bytes32 taskHash)": 572,
    "withdrawToken(address token, uint256 amount)": 1,
    "withdrawToken(uint256 tokenId, address to, bool withdrawBalances, bytes data)": 1,
    "withdrawToken(uint256 tokenId, address to, bytes data)": 1,
    "withdrawTokenBySeason(address token, uint32 season, uint256 amount)": 1,
    "withdrawTokens()": 14,
    "withdrawTokens(uint256 amount, address reciever)": 1,
    "withdrawTokens(uint256 tokenCount)": 3,
    "withdrawTokens(uint8 _allocationType)": 3,
    "withdrawUSDC(uint256 amountUSD)": 4,
    "withdrawUnderlying(address alchemist, address yieldToken, uint256 shares, address recipient, uint256 minimumAmountOut)": 2,
    "withdrawUnderlying(address yieldToken, uint256 shares, address recipient, uint256 minimumAmountOut)": 1,
    "withdrawUnderlying(uint256 _amount)": 2,
    "withdrawUnderlying(uint256 _amount, uint256 _amountX)": 1,
    "withdrawUniPosition()": 1,
    "withdrawUnlock()": 1,
    "withdrawVested(address account, uint256 vestIdx)": 6,
    "withdrawYield(uint256 _pid)": 2,
    "withdrawal()": 1,
    "wmMint(uint256 _quantity)": 2,
    "wnsRegister(tuple[] register,bytes[] sig)": 6,
    "wrap(address shareholder, uint256 amount)": 7,
    "wrap(uint256 _amount)": 44,
    "wrapAndRelayTokens(address _receiver)": 3,
    "wrapAndRelayTokens(address _receiver,bytes _data,tuple _account)": 1,
    "wrapAndTransferETH(uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce)": 16,
    "wrapBezoge(uint256 amount_)": 1,
    "wrapFromxBTRFLY(uint256 _amount)": 2,
    "wrapVouchers(address to, uint256 balanceLP1User, uint256 balanceLP2User, uint256 balanceLP3User)": 1,
    "writeDocuments(uint256 tokenId,string[] keys,tuple[] signedTexts)": 23,
    "xcallIntoLocal(uint32 _destination,address _to,address _asset,address _delegate,uint256 _amount,uint256 _slippage,bytes _callData)": 1,
    "zap(address _input_token,address _output_token,uint256 _amount_in,uint256 _min_out,address _recipient)": 12,
    "zapAndDeposit(address to, uint256 chainId, address token, uint256[] liquidityAmounts, uint256 minToMint, uint256 deadline)": 1,
    "zapAndDepositAndSwap(address to, uint256 chainId, address token, uint256[] liquidityAmounts, uint256 minToMint, uint256 liqDeadline, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 minDy, uint256 swapDeadline)": 185
}